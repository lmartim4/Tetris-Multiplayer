@startuml

class ISerializable {
    +virtual ~ISerializable()
    +virtual nlohmann::json serialize() const
    +virtual void deserialize(const nlohmann::json &data)
}

' class nlohmann::json {
    
' }

class Cell {

    -CellState state
    -CellColor color
    -Coordinate coordinate
    -int pieceId
    -int ownerID

    +Cell(Coordinate coord)
    +~Cell()
    +int getOwnerID() const
    +int getPieceId() const
    +void setPieceId(int id)
    +CellColor getColor() const
    +CellState getState() const
    +void setColor(CellColor c)
    +void setState(CellState s)
    +void setOwnerID(int o)
    +void setEmpty()
    +nlohmann::json serialize() const override
    +void deserialize(const nlohmann::json &json)
}

Cell --|> ISerializable 
Cell o-- Coordinate

class Clock {
    + Clock(std::string measurementName)
    + void start()
    + void end()
    + long long elapsedMicroseconds() const

    - std::chrono::time_point<std::chrono::high_resolution_clock> startTime_
    - std::string measurementName_
}

class Coordinate {
    + Coordinate()
    + Coordinate(int xVal, int yVal)
    + int getX()
    + int getY()
    + void addX(int x)
    + void addY(int y)
    + void setX(int x)
    + void setY(int y)
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &json)

    - int x
    - int y
}

Coordinate --|> ISerializable
' Coordinate ..> nlohmann::json

class EndGameData {
    + int totalPoints
    + int gameTime
    + int linesRemoved
    + int finalLevel
    + std::vector<PlayerData> players
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &data)
}

EndGameData --|> ISerializable 
EndGameData o-- PlayerData
' EndGameData ..> nlohmann::json

class GameStatus {
    + GameStatus()
    + ~GameStatus()
    + bool shouldLevelUp(int requiredLinesForLevelUp = 10)
    + int getScore() const
    + int getLevel() const
    + int getTotalLinesCleared() const
    + int getLinesClearedOnThisLevel() const
    + void addScore(int s)
    + void setLevel(int l)
    + void addTotalLinesCleared(int t)
    + void addLinesClearedOnThisLevel(int c)
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &json)

    - int score
    - int level
    - int totalLinesCleared
    - int linesClearedOnThisLevel
}

GameStatus --|> ISerializable
' GameStatus ..> nlohmann::json


class Logger {
    + Logger(std::string name)
    + ~Logger()
    + void console_log(const std::string &msg) const
    - std::string className
}

class NetworkManager {
    + const int network_frequency
    + static const int version
    + NetworkManager()
    + ~NetworkManager()
    + void registerListener(PacketType, std::function<void(const Packet &)>)
    + bool isRunning() const
    + std::string uint32_to_ipv4(uint32_t ip_addr)
    + ENetHost *getHost()
    + std::vector<ENetPeer *> getPeers()
    + void sendPacket(const Packet &)
    + void broadcastPacket(const Packet &)

    # Logger *logger
    # ENetHost *host
    # Packet parsePacket(const ENetPacket *enetPacket, ENetPeer *sourcePeer)
    # void handlePacket(Packet &packet, ENetPeer *peer)
    # virtual void onPeerConnect(ENetPeer *peer) = 0
    # virtual void onPeerDisconnect(ENetPeer *peer) = 0
    # void TaskStartNetwork()
    # void TaskStopNetwork()

    - std::unordered_map<uint8_t, std::function<void(const Packet &)>> listeners
    - std::queue<Packet> outgoingPackets
    - std::queue<Packet> incomingPackets
    - std::mutex outgoingMutex
    - std::mutex incomingMutex
    - std::condition_variable outgoingCondition
    - std::condition_variable incomingCondition
    - std::thread networkThread
    - std::thread sendThread
    - std::thread receiveThread
    - std::atomic<bool> mainTask
    - std::atomic<bool> sending
    - std::atomic<bool> receiving

    - void processENetEvent(ENetEvent &event)
    - void processIncomingPackets()
    - void sendOutgoingPackets()
    - ENetPacket *createENetPacket(const Packet &packet)
    - void TaskNetwork()
    - void TaskSend()
    - void TaskReceive()
}

NetworkManager o-- Logger
NetworkManager o-- Packet
' NetworkManager ..> nlohmann::json

class Packet {
    + Packet(PacketType t, ENetPeer *dest = nullptr)
    + Packet(PacketType t, const std::vector<uint8_t> &d, ENetPeer *dest = nullptr)
    + Packet(PacketType t, int i, ENetPeer *dest = nullptr)
    + Packet(PacketType t, const ISerializable &serializable, ENetPeer *dest = nullptr)
    + std::vector<uint8_t> toRawPacket() const
    + void setENetPeer(ENetPeer *p)
    + const std::vector<uint8_t> &getData() const
    + nlohmann::json getPayloadAsJson() const
    + PacketType getType() const
    + ENetPeer *getPeer() const

    - PacketType type
    - std::vector<uint8_t> data
    - ENetPeer *peer
}

' Packet ..> nlohmann::json

class PlayerData extends ISerializable {
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &data)

    - std::string playerName
    - int id
    - int score
    - bool isConnected
}

class PlayerList {
    + PlayerList()
    + ~PlayerList()
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &data)
    + const std::vector<PlayerData> &getPlayers() const
    + void clearPlayers()
    + void addPlayer(const PlayerData &player)
    + void removePlayer(const PlayerData &player)

    - std::vector<PlayerData> players
}

PlayerList --|> ISerializable
PlayerList o-- PlayerData

class TetrisBoard {
    + TetrisBoard(int h, int w)
    + ~TetrisBoard()
    + void printDebug() const
    + int getWidth() const
    + int getHeight() const
    + std::vector<std::vector<std::shared_ptr<Cell>>> &getGrid()
    + void clearBoard() const
    + void setSize(int x, int y)
    + int getNormalizedY(int y) const
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &data)

    - Logger *logger
    - int width
    - int height
    - std::vector<std::vector<std::shared_ptr<Cell>>> grid
    - void setupGrid()
}

TetrisBoard --|> ISerializable
TetrisBoard *-- Cell
TetrisBoard o-- Logger

class Tetromino {
    + Tetromino()
    + Tetromino(Coordinate coord, CellColor color, const std::vector<std::vector<int>> &s)
    + virtual ~Tetromino()
    + Coordinate getCoordinate() const
    + Coordinate &getCoordinate()
    + CellColor getColor() const
    + std::shared_ptr<TetrominoShape> getShape() const
    + int getId() const
    + bool hasChanged()
    + bool shouldBroadcastState()
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &data)

    - Coordinate coordinate
    - int pieceId
    - bool changed
    - void setShape(std::vector<std::vector<int>> &s)
    - void setCoordinate(Coordinate &coord)
    - void setChanged(bool c)

    # std::shared_ptr<TetrominoShape> shape
    # CellColor color

    - bool canMove
    - bool lockedInPlace

    + static const std::vector<CellColor> tetromino_colors
}

Tetromino --|> ISerializable
Tetromino *-- Coordinate
Tetromino o-- TetrominoShape

class TetrominoShape {
    + TetrominoShape()
    + TetrominoShape(const std::vector<std::vector<int>> &shape)
    + const std::vector<std::vector<int>> &getShape() const
    + void setShape(const std::vector<std::vector<int>> &newShape)
    + nlohmann::json serialize() const
    + void deserialize(const nlohmann::json &data)
    + void invertShape()

    - std::vector<std::vector<int>> shape
}

TetrominoShape --|> ISerializable


class ThreadSafeQueue <T>{
    + void push(T value)
    + bool pop(T &value)
    + void wait_and_pop(T &value)
    + bool empty() const
    + void clear()

    - std::queue<T> queue_
    - std::mutex mutex_
    - std::condition_variable cond_
}

@enduml