<?xml version="1.0" encoding="us-ascii" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="2025px" preserveAspectRatio="none" style="width:3316px;height:2025px;background:#FFFFFF;" version="1.1" viewBox="0 0 3316 2025" width="3316px" zoomAndPan="magnify"><defs/><g><!--class ISerializable--><g id="elem_ISerializable"><rect codeLine="2" fill="#F1F1F1" height="96.8906" id="ISerializable" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="383" x="1121" y="1716"/><ellipse cx="1268.25" cy="1732" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1271.2188,1737.6406 Q1270.6406,1737.9375 1270,1738.0781 Q1269.3594,1738.2344 1268.6563,1738.2344 Q1266.1563,1738.2344 1264.8281,1736.5938 Q1263.5156,1734.9375 1263.5156,1731.8125 Q1263.5156,1728.6875 1264.8281,1727.0313 Q1266.1563,1725.375 1268.6563,1725.375 Q1269.3594,1725.375 1270,1725.5313 Q1270.6563,1725.6875 1271.2188,1725.9844 L1271.2188,1728.7031 Q1270.5938,1728.125 1270,1727.8594 Q1269.4063,1727.5781 1268.7813,1727.5781 Q1267.4375,1727.5781 1266.75,1728.6563 Q1266.0625,1729.7188 1266.0625,1731.8125 Q1266.0625,1733.9063 1266.75,1734.9844 Q1267.4375,1736.0469 1268.7813,1736.0469 Q1269.4063,1736.0469 1270,1735.7813 Q1270.5938,1735.5 1271.2188,1734.9219 L1271.2188,1737.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="1288.75" y="1736.8467">ISerializable</text><line style="stroke:#181818;stroke-width:0.5;" x1="1122" x2="1503" y1="1748" y2="1748"/><line style="stroke:#181818;stroke-width:0.5;" x1="1122" x2="1503" y1="1756" y2="1756"/><ellipse cx="1132" cy="1769.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="1141" y="1772.9951">virtual ~ISerializable()</text><ellipse cx="1132" cy="1785.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="265" x="1141" y="1789.292">virtual nlohmann::json serialize() const</text><ellipse cx="1132" cy="1802.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="1141" y="1805.5889">virtual void deserialize(const nlohmann::json &amp;data)</text></g><!--class Cell--><g id="elem_Cell"><rect codeLine="12" fill="#F1F1F1" height="341.3438" id="Cell" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="338" x="1167.5" y="864.5"/><ellipse cx="1319.75" cy="880.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1322.7188,886.1406 Q1322.1406,886.4375 1321.5,886.5781 Q1320.8594,886.7344 1320.1563,886.7344 Q1317.6563,886.7344 1316.3281,885.0938 Q1315.0156,883.4375 1315.0156,880.3125 Q1315.0156,877.1875 1316.3281,875.5313 Q1317.6563,873.875 1320.1563,873.875 Q1320.8594,873.875 1321.5,874.0313 Q1322.1563,874.1875 1322.7188,874.4844 L1322.7188,877.2031 Q1322.0938,876.625 1321.5,876.3594 Q1320.9063,876.0781 1320.2813,876.0781 Q1318.9375,876.0781 1318.25,877.1563 Q1317.5625,878.2188 1317.5625,880.3125 Q1317.5625,882.4063 1318.25,883.4844 Q1318.9375,884.5469 1320.2813,884.5469 Q1320.9063,884.5469 1321.5,884.2813 Q1322.0938,884 1322.7188,883.4219 L1322.7188,886.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="1340.25" y="885.3467">Cell</text><line style="stroke:#181818;stroke-width:0.5;" x1="1168.5" x2="1504.5" y1="896.5" y2="896.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1175.5" y="907.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1187.5" y="913.4951">CellState state</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1175.5" y="923.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="1187.5" y="929.792">CellColor color</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1175.5" y="939.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="1187.5" y="946.0889">Coordinate coordinate</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1175.5" y="956.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="1187.5" y="962.3857">int pieceId</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1175.5" y="972.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="1187.5" y="978.6826">int ownerID</text><line style="stroke:#181818;stroke-width:0.5;" x1="1168.5" x2="1504.5" y1="985.9844" y2="985.9844"/><ellipse cx="1178.5" cy="999.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="1187.5" y="1002.9795">Cell(Coordinate coord)</text><ellipse cx="1178.5" cy="1015.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="1187.5" y="1019.2764">~Cell()</text><ellipse cx="1178.5" cy="1032.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="1187.5" y="1035.5732">int getOwnerID() const</text><ellipse cx="1178.5" cy="1048.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="1187.5" y="1051.8701">int getPieceId() const</text><ellipse cx="1178.5" cy="1064.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="1187.5" y="1068.167">void setPieceId(int id)</text><ellipse cx="1178.5" cy="1081.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="1187.5" y="1084.4639">CellColor getColor() const</text><ellipse cx="1178.5" cy="1097.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="1187.5" y="1100.7607">CellState getState() const</text><ellipse cx="1178.5" cy="1113.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="1187.5" y="1117.0576">void setColor(CellColor c)</text><ellipse cx="1178.5" cy="1130.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="1187.5" y="1133.3545">void setState(CellState s)</text><ellipse cx="1178.5" cy="1146.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="1187.5" y="1149.6514">void setOwnerID(int o)</text><ellipse cx="1178.5" cy="1162.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1187.5" y="1165.9482">void setEmpty()</text><ellipse cx="1178.5" cy="1178.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="1187.5" y="1182.2451">nlohmann::json serialize() const override</text><ellipse cx="1178.5" cy="1195.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="1187.5" y="1198.542">void deserialize(const nlohmann::json &amp;json)</text></g><!--class Coordinate--><g id="elem_Coordinate"><rect codeLine="49" fill="#F1F1F1" height="243.5625" id="Coordinate" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="338" x="968.5" y="1371.5"/><ellipse cx="1095.25" cy="1387.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1098.2188,1393.1406 Q1097.6406,1393.4375 1097,1393.5781 Q1096.3594,1393.7344 1095.6563,1393.7344 Q1093.1563,1393.7344 1091.8281,1392.0938 Q1090.5156,1390.4375 1090.5156,1387.3125 Q1090.5156,1384.1875 1091.8281,1382.5313 Q1093.1563,1380.875 1095.6563,1380.875 Q1096.3594,1380.875 1097,1381.0313 Q1097.6563,1381.1875 1098.2188,1381.4844 L1098.2188,1384.2031 Q1097.5938,1383.625 1097,1383.3594 Q1096.4063,1383.0781 1095.7813,1383.0781 Q1094.4375,1383.0781 1093.75,1384.1563 Q1093.0625,1385.2188 1093.0625,1387.3125 Q1093.0625,1389.4063 1093.75,1390.4844 Q1094.4375,1391.5469 1095.7813,1391.5469 Q1096.4063,1391.5469 1097,1391.2813 Q1097.5938,1391 1098.2188,1390.4219 L1098.2188,1393.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="1115.75" y="1392.3467">Coordinate</text><line style="stroke:#181818;stroke-width:0.5;" x1="969.5" x2="1305.5" y1="1403.5" y2="1403.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="976.5" y="1414.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="988.5" y="1420.4951">int x</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="976.5" y="1430.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="988.5" y="1436.792">int y</text><line style="stroke:#181818;stroke-width:0.5;" x1="969.5" x2="1305.5" y1="1444.0938" y2="1444.0938"/><ellipse cx="979.5" cy="1457.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="988.5" y="1461.0889">Coordinate()</text><ellipse cx="979.5" cy="1474.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="988.5" y="1477.3857">Coordinate(int xVal, int yVal)</text><ellipse cx="979.5" cy="1490.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="988.5" y="1493.6826">int getX()</text><ellipse cx="979.5" cy="1506.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="988.5" y="1509.9795">int getY()</text><ellipse cx="979.5" cy="1522.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="988.5" y="1526.2764">void addX(int x)</text><ellipse cx="979.5" cy="1539.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="988.5" y="1542.5732">void addY(int y)</text><ellipse cx="979.5" cy="1555.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="988.5" y="1558.8701">void setX(int x)</text><ellipse cx="979.5" cy="1571.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="988.5" y="1575.167">void setY(int y)</text><ellipse cx="979.5" cy="1588.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="988.5" y="1591.4639">nlohmann::json serialize() const</text><ellipse cx="979.5" cy="1604.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="988.5" y="1607.7607">void deserialize(const nlohmann::json &amp;json)</text></g><!--class CellColor--><g id="elem_CellColor"><rect fill="#F1F1F1" height="48" id="CellColor" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="93" x="1341" y="1469.5"/><ellipse cx="1356" cy="1485.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1358.9688,1491.1406 Q1358.3906,1491.4375 1357.75,1491.5781 Q1357.1094,1491.7344 1356.4063,1491.7344 Q1353.9063,1491.7344 1352.5781,1490.0938 Q1351.2656,1488.4375 1351.2656,1485.3125 Q1351.2656,1482.1875 1352.5781,1480.5313 Q1353.9063,1478.875 1356.4063,1478.875 Q1357.1094,1478.875 1357.75,1479.0313 Q1358.4063,1479.1875 1358.9688,1479.4844 L1358.9688,1482.2031 Q1358.3438,1481.625 1357.75,1481.3594 Q1357.1563,1481.0781 1356.5313,1481.0781 Q1355.1875,1481.0781 1354.5,1482.1563 Q1353.8125,1483.2188 1353.8125,1485.3125 Q1353.8125,1487.4063 1354.5,1488.4844 Q1355.1875,1489.5469 1356.5313,1489.5469 Q1357.1563,1489.5469 1357.75,1489.2813 Q1358.3438,1489 1358.9688,1488.4219 L1358.9688,1491.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="1370" y="1490.3467">CellColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="1342" x2="1433" y1="1501.5" y2="1501.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="1342" x2="1433" y1="1509.5" y2="1509.5"/></g><!--class Clock--><g id="elem_Clock"><rect codeLine="39" fill="#F1F1F1" height="145.7813" id="Clock" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="529" x="2514" y="300"/><ellipse cx="2755.25" cy="316" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2758.2188,321.6406 Q2757.6406,321.9375 2757,322.0781 Q2756.3594,322.2344 2755.6563,322.2344 Q2753.1563,322.2344 2751.8281,320.5938 Q2750.5156,318.9375 2750.5156,315.8125 Q2750.5156,312.6875 2751.8281,311.0313 Q2753.1563,309.375 2755.6563,309.375 Q2756.3594,309.375 2757,309.5313 Q2757.6563,309.6875 2758.2188,309.9844 L2758.2188,312.7031 Q2757.5938,312.125 2757,311.8594 Q2756.4063,311.5781 2755.7813,311.5781 Q2754.4375,311.5781 2753.75,312.6563 Q2753.0625,313.7188 2753.0625,315.8125 Q2753.0625,317.9063 2753.75,318.9844 Q2754.4375,320.0469 2755.7813,320.0469 Q2756.4063,320.0469 2757,319.7813 Q2757.5938,319.5 2758.2188,318.9219 L2758.2188,321.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="2775.75" y="320.8467">Clock</text><line style="stroke:#181818;stroke-width:0.5;" x1="2515" x2="3042" y1="332" y2="332"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2522" y="342.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="503" x="2534" y="348.9951">std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; startTime_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2522" y="358.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="2534" y="365.292">std::string measurementName_</text><line style="stroke:#181818;stroke-width:0.5;" x1="2515" x2="3042" y1="372.5938" y2="372.5938"/><ellipse cx="2525" cy="386.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="2534" y="389.5889">Clock(std::string measurementName)</text><ellipse cx="2525" cy="402.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="2534" y="405.8857">void start()</text><ellipse cx="2525" cy="418.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="2534" y="422.1826">void end()</text><ellipse cx="2525" cy="435.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="2534" y="438.4795">long long elapsedMicroseconds() const</text></g><!--class EndGameData--><g id="elem_EndGameData"><rect codeLine="68" fill="#F1F1F1" height="162.0781" id="EndGameData" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="339" x="7" y="1412.5"/><ellipse cx="122.25" cy="1428.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M125.2188,1434.1406 Q124.6406,1434.4375 124,1434.5781 Q123.3594,1434.7344 122.6563,1434.7344 Q120.1563,1434.7344 118.8281,1433.0938 Q117.5156,1431.4375 117.5156,1428.3125 Q117.5156,1425.1875 118.8281,1423.5313 Q120.1563,1421.875 122.6563,1421.875 Q123.3594,1421.875 124,1422.0313 Q124.6563,1422.1875 125.2188,1422.4844 L125.2188,1425.2031 Q124.5938,1424.625 124,1424.3594 Q123.4063,1424.0781 122.7813,1424.0781 Q121.4375,1424.0781 120.75,1425.1563 Q120.0625,1426.2188 120.0625,1428.3125 Q120.0625,1430.4063 120.75,1431.4844 Q121.4375,1432.5469 122.7813,1432.5469 Q123.4063,1432.5469 124,1432.2813 Q124.5938,1432 125.2188,1431.4219 L125.2188,1434.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="142.75" y="1433.3467">EndGameData</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="345" y1="1444.5" y2="1444.5"/><ellipse cx="18" cy="1458.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="27" y="1461.4951">int totalPoints</text><ellipse cx="18" cy="1474.4453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="27" y="1477.792">int gameTime</text><ellipse cx="18" cy="1490.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="27" y="1494.0889">int linesRemoved</text><ellipse cx="18" cy="1507.0391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="27" y="1510.3857">int finalLevel</text><ellipse cx="18" cy="1523.3359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="27" y="1526.6826">std::vector&lt;PlayerData&gt; players</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="345" y1="1533.9844" y2="1533.9844"/><ellipse cx="18" cy="1547.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="27" y="1550.9795">nlohmann::json serialize() const</text><ellipse cx="18" cy="1563.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="27" y="1567.2764">void deserialize(const nlohmann::json &amp;data)</text></g><!--class PlayerData--><g id="elem_PlayerData"><rect codeLine="182" fill="#F1F1F1" height="145.7813" id="PlayerData" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="339" x="1143" y="1873"/><ellipse cx="1271.75" cy="1889" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1274.7188,1894.6406 Q1274.1406,1894.9375 1273.5,1895.0781 Q1272.8594,1895.2344 1272.1563,1895.2344 Q1269.6563,1895.2344 1268.3281,1893.5938 Q1267.0156,1891.9375 1267.0156,1888.8125 Q1267.0156,1885.6875 1268.3281,1884.0313 Q1269.6563,1882.375 1272.1563,1882.375 Q1272.8594,1882.375 1273.5,1882.5313 Q1274.1563,1882.6875 1274.7188,1882.9844 L1274.7188,1885.7031 Q1274.0938,1885.125 1273.5,1884.8594 Q1272.9063,1884.5781 1272.2813,1884.5781 Q1270.9375,1884.5781 1270.25,1885.6563 Q1269.5625,1886.7188 1269.5625,1888.8125 Q1269.5625,1890.9063 1270.25,1891.9844 Q1270.9375,1893.0469 1272.2813,1893.0469 Q1272.9063,1893.0469 1273.5,1892.7813 Q1274.0938,1892.5 1274.7188,1891.9219 L1274.7188,1894.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="1292.25" y="1893.8467">PlayerData</text><line style="stroke:#181818;stroke-width:0.5;" x1="1144" x2="1481" y1="1905" y2="1905"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1151" y="1915.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="1163" y="1921.9951">std::string playerName</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1151" y="1931.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="1163" y="1938.292">int id</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1151" y="1948.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="1163" y="1954.5889">int score</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1151" y="1964.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="1163" y="1970.8857">bool isConnected</text><line style="stroke:#181818;stroke-width:0.5;" x1="1144" x2="1481" y1="1978.1875" y2="1978.1875"/><ellipse cx="1154" cy="1991.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="1163" y="1995.1826">nlohmann::json serialize() const</text><ellipse cx="1154" cy="2008.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="1163" y="2011.4795">void deserialize(const nlohmann::json &amp;data)</text></g><!--class GameStatus--><g id="elem_GameStatus"><rect codeLine="82" fill="#F1F1F1" height="325.0469" id="GameStatus" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="400" x="1611.5" y="1331"/><ellipse cx="1764.75" cy="1347" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1767.7188,1352.6406 Q1767.1406,1352.9375 1766.5,1353.0781 Q1765.8594,1353.2344 1765.1563,1353.2344 Q1762.6563,1353.2344 1761.3281,1351.5938 Q1760.0156,1349.9375 1760.0156,1346.8125 Q1760.0156,1343.6875 1761.3281,1342.0313 Q1762.6563,1340.375 1765.1563,1340.375 Q1765.8594,1340.375 1766.5,1340.5313 Q1767.1563,1340.6875 1767.7188,1340.9844 L1767.7188,1343.7031 Q1767.0938,1343.125 1766.5,1342.8594 Q1765.9063,1342.5781 1765.2813,1342.5781 Q1763.9375,1342.5781 1763.25,1343.6563 Q1762.5625,1344.7188 1762.5625,1346.8125 Q1762.5625,1348.9063 1763.25,1349.9844 Q1763.9375,1351.0469 1765.2813,1351.0469 Q1765.9063,1351.0469 1766.5,1350.7813 Q1767.0938,1350.5 1767.7188,1349.9219 L1767.7188,1352.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="1785.25" y="1351.8467">GameStatus</text><line style="stroke:#181818;stroke-width:0.5;" x1="1612.5" x2="2010.5" y1="1363" y2="1363"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1619.5" y="1373.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="1631.5" y="1379.9951">int score</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1619.5" y="1389.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="1631.5" y="1396.292">int level</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1619.5" y="1406.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1631.5" y="1412.5889">int totalLinesCleared</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1619.5" y="1422.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="1631.5" y="1428.8857">int linesClearedOnThisLevel</text><line style="stroke:#181818;stroke-width:0.5;" x1="1612.5" x2="2010.5" y1="1436.1875" y2="1436.1875"/><ellipse cx="1622.5" cy="1449.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1631.5" y="1453.1826">GameStatus()</text><ellipse cx="1622.5" cy="1466.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1631.5" y="1469.4795">~GameStatus()</text><ellipse cx="1622.5" cy="1482.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="374" x="1631.5" y="1485.7764">bool shouldLevelUp(int requiredLinesForLevelUp = 10)</text><ellipse cx="1622.5" cy="1498.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="1631.5" y="1502.0732">int getScore() const</text><ellipse cx="1622.5" cy="1515.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1631.5" y="1518.3701">int getLevel() const</text><ellipse cx="1622.5" cy="1531.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="1631.5" y="1534.667">int getTotalLinesCleared() const</text><ellipse cx="1622.5" cy="1547.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="1631.5" y="1550.9639">int getLinesClearedOnThisLevel() const</text><ellipse cx="1622.5" cy="1563.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="1631.5" y="1567.2607">void addScore(int s)</text><ellipse cx="1622.5" cy="1580.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="1631.5" y="1583.5576">void setLevel(int l)</text><ellipse cx="1622.5" cy="1596.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="1631.5" y="1599.8545">void addTotalLinesCleared(int t)</text><ellipse cx="1622.5" cy="1612.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="1631.5" y="1616.1514">void addLinesClearedOnThisLevel(int c)</text><ellipse cx="1622.5" cy="1629.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="1631.5" y="1632.4482">nlohmann::json serialize() const</text><ellipse cx="1622.5" cy="1645.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="1631.5" y="1648.7451">void deserialize(const nlohmann::json &amp;json)</text></g><!--class Logger--><g id="elem_Logger"><rect codeLine="107" fill="#F1F1F1" height="113.1875" id="Logger" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="354" x="1611.5" y="978.5"/><ellipse cx="1760.25" cy="994.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1763.2188,1000.1406 Q1762.6406,1000.4375 1762,1000.5781 Q1761.3594,1000.7344 1760.6563,1000.7344 Q1758.1563,1000.7344 1756.8281,999.0938 Q1755.5156,997.4375 1755.5156,994.3125 Q1755.5156,991.1875 1756.8281,989.5313 Q1758.1563,987.875 1760.6563,987.875 Q1761.3594,987.875 1762,988.0313 Q1762.6563,988.1875 1763.2188,988.4844 L1763.2188,991.2031 Q1762.5938,990.625 1762,990.3594 Q1761.4063,990.0781 1760.7813,990.0781 Q1759.4375,990.0781 1758.75,991.1563 Q1758.0625,992.2188 1758.0625,994.3125 Q1758.0625,996.4063 1758.75,997.4844 Q1759.4375,998.5469 1760.7813,998.5469 Q1761.4063,998.5469 1762,998.2813 Q1762.5938,998 1763.2188,997.4219 L1763.2188,1000.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="1780.75" y="999.3467">Logger</text><line style="stroke:#181818;stroke-width:0.5;" x1="1612.5" x2="1964.5" y1="1010.5" y2="1010.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1619.5" y="1021.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="1631.5" y="1027.4951">std::string className</text><line style="stroke:#181818;stroke-width:0.5;" x1="1612.5" x2="1964.5" y1="1034.7969" y2="1034.7969"/><ellipse cx="1622.5" cy="1048.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="1631.5" y="1051.792">Logger(std::string name)</text><ellipse cx="1622.5" cy="1064.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="1631.5" y="1068.0889">~Logger()</text><ellipse cx="1622.5" cy="1081.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="1631.5" y="1084.3857">void console_log(const std::string &amp;msg) const</text></g><!--class NetworkManager--><g id="elem_NetworkManager"><rect codeLine="114" fill="#F1F1F1" height="732.4688" id="NetworkManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="566" x="1912.5" y="7"/><ellipse cx="2132.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2135.7188,28.6406 Q2135.1406,28.9375 2134.5,29.0781 Q2133.8594,29.2344 2133.1563,29.2344 Q2130.6563,29.2344 2129.3281,27.5938 Q2128.0156,25.9375 2128.0156,22.8125 Q2128.0156,19.6875 2129.3281,18.0313 Q2130.6563,16.375 2133.1563,16.375 Q2133.8594,16.375 2134.5,16.5313 Q2135.1563,16.6875 2135.7188,16.9844 L2135.7188,19.7031 Q2135.0938,19.125 2134.5,18.8594 Q2133.9063,18.5781 2133.2813,18.5781 Q2131.9375,18.5781 2131.25,19.6563 Q2130.5625,20.7188 2130.5625,22.8125 Q2130.5625,24.9063 2131.25,25.9844 Q2131.9375,27.0469 2133.2813,27.0469 Q2133.9063,27.0469 2134.5,26.7813 Q2135.0938,26.5 2135.7188,25.9219 L2135.7188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="2153.25" y="27.8467">NetworkManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="1913.5" x2="2477.5" y1="39" y2="39"/><ellipse cx="1923.5" cy="52.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="1932.5" y="55.9951">const int network_frequency</text><ellipse cx="1923.5" cy="68.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="1932.5" y="72.292">static const int version</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="1932.5" y="88.5889">&#160;</text><polygon fill="none" points="1923.5,96.5391,1927.5,100.5391,1923.5,104.5391,1919.5,100.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="1932.5" y="104.8857">Logger *logger</text><polygon fill="none" points="1923.5,112.8359,1927.5,116.8359,1923.5,120.8359,1919.5,116.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1932.5" y="121.1826">ENetHost *host</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="1932.5" y="137.4795">&#160;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="147.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="1932.5" y="153.7764">std::queue&lt;Packet&gt; outgoingPackets</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="163.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="1932.5" y="170.0732">std::queue&lt;Packet&gt; incomingPackets</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="180.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="1932.5" y="186.3701">std::mutex outgoingMutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="196.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="1932.5" y="202.667">std::mutex incomingMutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="212.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="1932.5" y="218.9639">std::condition_variable outgoingCondition</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="228.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="1932.5" y="235.2607">std::condition_variable incomingCondition</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="245.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="1932.5" y="251.5576">std::thread networkThread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="261.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="1932.5" y="267.8545">std::thread sendThread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="277.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="1932.5" y="284.1514">std::thread receiveThread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="294.1016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="1932.5" y="300.4482">std::atomic&lt;bool&gt; mainTask</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="310.3984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="192" x="1932.5" y="316.7451">std::atomic&lt;bool&gt; sending</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="326.6953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="1932.5" y="333.042">std::atomic&lt;bool&gt; receiving</text><line style="stroke:#181818;stroke-width:0.5;" x1="1913.5" x2="2477.5" y1="340.3438" y2="340.3438"/><ellipse cx="1923.5" cy="353.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="1932.5" y="357.3389">NetworkManager()</text><ellipse cx="1923.5" cy="370.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="1932.5" y="373.6357">~NetworkManager()</text><ellipse cx="1923.5" cy="386.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="495" x="1932.5" y="389.9326">void registerListener(PacketType, std::function&lt;void(const Packet &amp;)&gt;)</text><ellipse cx="1923.5" cy="402.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="1932.5" y="406.2295">bool isRunning() const</text><ellipse cx="1923.5" cy="419.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="1932.5" y="422.5264">std::string uint32_to_ipv4(uint32_t ip_addr);</text><ellipse cx="1923.5" cy="435.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="1932.5" y="438.8232">ENetHost *getHost()</text><ellipse cx="1923.5" cy="451.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="252" x="1932.5" y="455.1201">std::vector&lt;ENetPeer *&gt; getPeers()</text><ellipse cx="1923.5" cy="468.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="1932.5" y="471.417">void sendPacket(const Packet &amp;)</text><ellipse cx="1923.5" cy="484.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="264" x="1932.5" y="487.7139">void broadcastPacket(const Packet &amp;)</text><polygon fill="#FFFF44" points="1923.5,495.6641,1927.5,499.6641,1923.5,503.6641,1919.5,499.6641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="1932.5" y="504.0107">Packet parsePacket(const ENetPacket *enetPacket, ENetPeer *sourcePeer)</text><polygon fill="#FFFF44" points="1923.5,511.9609,1927.5,515.9609,1923.5,519.9609,1919.5,515.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="362" x="1932.5" y="520.3076">void handlePacket(Packet &amp;packet, ENetPeer *peer)</text><polygon fill="#FFFF44" points="1923.5,528.2578,1927.5,532.2578,1923.5,536.2578,1919.5,532.2578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="1932.5" y="536.6045">virtual void onPeerConnect(ENetPeer *peer) = 0</text><polygon fill="#FFFF44" points="1923.5,544.5547,1927.5,548.5547,1923.5,552.5547,1919.5,548.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="1932.5" y="552.9014">virtual void onPeerDisconnect(ENetPeer *peer) = 0</text><polygon fill="#FFFF44" points="1923.5,560.8516,1927.5,564.8516,1923.5,568.8516,1919.5,564.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="1932.5" y="569.1982">void TaskStartNetwork()</text><polygon fill="#FFFF44" points="1923.5,577.1484,1927.5,581.1484,1923.5,585.1484,1919.5,581.1484" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="1932.5" y="585.4951">void TaskStopNetwork()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="1932.5" y="601.792">&#160;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="611.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="540" x="1932.5" y="618.0889">std::unordered_map&lt;uint8_t, std::function&lt;void(const Packet &amp;)&gt;&gt; listeners</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="628.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="297" x="1932.5" y="634.3857">void processENetEvent(ENetEvent &amp;event)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="644.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="1932.5" y="650.6826">void processIncomingPackets()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="660.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="1932.5" y="666.9795">void sendOutgoingPackets()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="676.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="378" x="1932.5" y="683.2764">ENetPacket *createENetPacket(const Packet &amp;packet)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="693.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1932.5" y="699.5732">void TaskNetwork()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="709.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="1932.5" y="715.8701">void TaskSend()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1920.5" y="725.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="1932.5" y="732.167">void TaskReceive()</text></g><!--class Packet--><g id="elem_Packet"><rect codeLine="163" fill="#F1F1F1" height="259.8594" id="Packet" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="574" x="2000.5" y="905"/><ellipse cx="2259.75" cy="921" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2262.7188,926.6406 Q2262.1406,926.9375 2261.5,927.0781 Q2260.8594,927.2344 2260.1563,927.2344 Q2257.6563,927.2344 2256.3281,925.5938 Q2255.0156,923.9375 2255.0156,920.8125 Q2255.0156,917.6875 2256.3281,916.0313 Q2257.6563,914.375 2260.1563,914.375 Q2260.8594,914.375 2261.5,914.5313 Q2262.1563,914.6875 2262.7188,914.9844 L2262.7188,917.7031 Q2262.0938,917.125 2261.5,916.8594 Q2260.9063,916.5781 2260.2813,916.5781 Q2258.9375,916.5781 2258.25,917.6563 Q2257.5625,918.7188 2257.5625,920.8125 Q2257.5625,922.9063 2258.25,923.9844 Q2258.9375,925.0469 2260.2813,925.0469 Q2260.9063,925.0469 2261.5,924.7813 Q2262.0938,924.5 2262.7188,923.9219 L2262.7188,926.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="2280.25" y="925.8467">Packet</text><line style="stroke:#181818;stroke-width:0.5;" x1="2001.5" x2="2573.5" y1="937" y2="937"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2008.5" y="947.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="2020.5" y="953.9951">PacketType type</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2008.5" y="963.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="2020.5" y="970.292">std::vector&lt;uint8_t&gt; data</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2008.5" y="980.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="2020.5" y="986.5889">ENetPeer *peer</text><line style="stroke:#181818;stroke-width:0.5;" x1="2001.5" x2="2573.5" y1="993.8906" y2="993.8906"/><ellipse cx="2011.5" cy="1007.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="2020.5" y="1010.8857">Packet(PacketType t, ENetPeer *dest = nullptr)</text><ellipse cx="2011.5" cy="1023.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="547" x="2020.5" y="1027.1826">Packet(PacketType t, const std::vector&lt;uint8_t&gt; &amp;d, ENetPeer *dest = nullptr)</text><ellipse cx="2011.5" cy="1040.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="2020.5" y="1043.4795">Packet(PacketType t, int i, ENetPeer *dest = nullptr)</text><ellipse cx="2011.5" cy="1056.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="548" x="2020.5" y="1059.7764">Packet(PacketType t, const ISerializable &amp;serializable, ENetPeer *dest = nullptr)</text><ellipse cx="2011.5" cy="1072.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293" x="2020.5" y="1076.0732">std::vector&lt;uint8_t&gt; toRawPacket() const</text><ellipse cx="2011.5" cy="1089.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="2020.5" y="1092.3701">void setENetPeer(ENetPeer *p)</text><ellipse cx="2011.5" cy="1105.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="2020.5" y="1108.667">const std::vector&lt;uint8_t&gt; &amp;getData() const</text><ellipse cx="2011.5" cy="1121.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="2020.5" y="1124.9639">nlohmann::json getPayloadAsJson() const</text><ellipse cx="2011.5" cy="1137.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="2020.5" y="1141.2607">PacketType getType() const</text><ellipse cx="2011.5" cy="1154.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="2020.5" y="1157.5576">ENetPeer *getPeer() const</text></g><!--class PlayerList--><g id="elem_PlayerList"><rect codeLine="192" fill="#F1F1F1" height="194.6719" id="PlayerList" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="382" x="2046.5" y="1396"/><ellipse cx="2201.25" cy="1412" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2204.2188,1417.6406 Q2203.6406,1417.9375 2203,1418.0781 Q2202.3594,1418.2344 2201.6563,1418.2344 Q2199.1563,1418.2344 2197.8281,1416.5938 Q2196.5156,1414.9375 2196.5156,1411.8125 Q2196.5156,1408.6875 2197.8281,1407.0313 Q2199.1563,1405.375 2201.6563,1405.375 Q2202.3594,1405.375 2203,1405.5313 Q2203.6563,1405.6875 2204.2188,1405.9844 L2204.2188,1408.7031 Q2203.5938,1408.125 2203,1407.8594 Q2202.4063,1407.5781 2201.7813,1407.5781 Q2200.4375,1407.5781 2199.75,1408.6563 Q2199.0625,1409.7188 2199.0625,1411.8125 Q2199.0625,1413.9063 2199.75,1414.9844 Q2200.4375,1416.0469 2201.7813,1416.0469 Q2202.4063,1416.0469 2203,1415.7813 Q2203.5938,1415.5 2204.2188,1414.9219 L2204.2188,1417.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="2221.75" y="1416.8467">PlayerList</text><line style="stroke:#181818;stroke-width:0.5;" x1="2047.5" x2="2427.5" y1="1428" y2="1428"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2054.5" y="1438.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="2066.5" y="1444.9951">std::vector&lt;PlayerData&gt; players</text><line style="stroke:#181818;stroke-width:0.5;" x1="2047.5" x2="2427.5" y1="1452.2969" y2="1452.2969"/><ellipse cx="2057.5" cy="1465.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="2066.5" y="1469.292">PlayerList()</text><ellipse cx="2057.5" cy="1482.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="2066.5" y="1485.5889">~PlayerList()</text><ellipse cx="2057.5" cy="1498.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="2066.5" y="1501.8857">nlohmann::json serialize() const</text><ellipse cx="2057.5" cy="1514.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="2066.5" y="1518.1826">void deserialize(const nlohmann::json &amp;data)</text><ellipse cx="2057.5" cy="1531.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="2066.5" y="1534.4795">const std::vector&lt;PlayerData&gt; &amp;getPlayers() const</text><ellipse cx="2057.5" cy="1547.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="2066.5" y="1550.7764">void clearPlayers()</text><ellipse cx="2057.5" cy="1563.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="2066.5" y="1567.0732">void addPlayer(const PlayerData &amp;player)</text><ellipse cx="2057.5" cy="1580.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="2066.5" y="1583.3701">void removePlayer(const PlayerData &amp;player)</text></g><!--class TetrisBoard--><g id="elem_TetrisBoard"><rect codeLine="208" fill="#F1F1F1" height="308.75" id="TetrisBoard" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="456" x="1330.5" y="218.5"/><ellipse cx="1514.25" cy="234.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1517.2188,240.1406 Q1516.6406,240.4375 1516,240.5781 Q1515.3594,240.7344 1514.6563,240.7344 Q1512.1563,240.7344 1510.8281,239.0938 Q1509.5156,237.4375 1509.5156,234.3125 Q1509.5156,231.1875 1510.8281,229.5313 Q1512.1563,227.875 1514.6563,227.875 Q1515.3594,227.875 1516,228.0313 Q1516.6563,228.1875 1517.2188,228.4844 L1517.2188,231.2031 Q1516.5938,230.625 1516,230.3594 Q1515.4063,230.0781 1514.7813,230.0781 Q1513.4375,230.0781 1512.75,231.1563 Q1512.0625,232.2188 1512.0625,234.3125 Q1512.0625,236.4063 1512.75,237.4844 Q1513.4375,238.5469 1514.7813,238.5469 Q1515.4063,238.5469 1516,238.2813 Q1516.5938,238 1517.2188,237.4219 L1517.2188,240.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="1534.75" y="239.3467">TetrisBoard</text><line style="stroke:#181818;stroke-width:0.5;" x1="1331.5" x2="1785.5" y1="250.5" y2="250.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1338.5" y="261.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="1350.5" y="267.4951">Logger *logger</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1338.5" y="277.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="1350.5" y="283.792">int width</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1338.5" y="293.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="1350.5" y="300.0889">int height</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1338.5" y="310.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="383" x="1350.5" y="316.3857">std::vector&lt;std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;&gt; grid</text><line style="stroke:#181818;stroke-width:0.5;" x1="1331.5" x2="1785.5" y1="323.6875" y2="323.6875"/><ellipse cx="1341.5" cy="337.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="1350.5" y="340.6826">TetrisBoard(int h, int w)</text><ellipse cx="1341.5" cy="353.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="1350.5" y="356.9795">~TetrisBoard()</text><ellipse cx="1341.5" cy="369.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="1350.5" y="373.2764">void printDebug() const</text><ellipse cx="1341.5" cy="386.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="1350.5" y="389.5732">int getWidth() const</text><ellipse cx="1341.5" cy="402.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="1350.5" y="405.8701">int getHeight() const</text><ellipse cx="1341.5" cy="418.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="430" x="1350.5" y="422.167">std::vector&lt;std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;&gt; &amp;getGrid()</text><ellipse cx="1341.5" cy="435.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="1350.5" y="438.4639">void clearBoard() const</text><ellipse cx="1341.5" cy="451.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="1350.5" y="454.7607">void setSize(int x, int y)</text><ellipse cx="1341.5" cy="467.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="1350.5" y="471.0576">int getNormalizedY(int y) const</text><ellipse cx="1341.5" cy="484.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="1350.5" y="487.3545">nlohmann::json serialize() const</text><ellipse cx="1341.5" cy="500.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="1350.5" y="503.6514">void deserialize(const nlohmann::json &amp;data)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1338.5" y="513.6016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="1350.5" y="519.9482">void setupGrid()</text></g><!--class Tetromino--><g id="elem_Tetromino"><rect codeLine="232" fill="#F1F1F1" height="471.7188" id="Tetromino" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="624" x="508.5" y="799"/><ellipse cx="780.75" cy="815" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M783.7188,820.6406 Q783.1406,820.9375 782.5,821.0781 Q781.8594,821.2344 781.1563,821.2344 Q778.6563,821.2344 777.3281,819.5938 Q776.0156,817.9375 776.0156,814.8125 Q776.0156,811.6875 777.3281,810.0313 Q778.6563,808.375 781.1563,808.375 Q781.8594,808.375 782.5,808.5313 Q783.1563,808.6875 783.7188,808.9844 L783.7188,811.7031 Q783.0938,811.125 782.5,810.8594 Q781.9063,810.5781 781.2813,810.5781 Q779.9375,810.5781 779.25,811.6563 Q778.5625,812.7188 778.5625,814.8125 Q778.5625,816.9063 779.25,817.9844 Q779.9375,819.0469 781.2813,819.0469 Q781.9063,819.0469 782.5,818.7813 Q783.0938,818.5 783.7188,817.9219 L783.7188,820.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="801.25" y="819.8467">Tetromino</text><line style="stroke:#181818;stroke-width:0.5;" x1="509.5" x2="1131.5" y1="831" y2="831"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="841.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="528.5" y="847.9951">Coordinate coordinate</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="857.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="528.5" y="864.292">int pieceId</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="874.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="528.5" y="880.5889">bool changed</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="528.5" y="896.8857">&#160;</text><polygon fill="none" points="519.5,904.8359,523.5,908.8359,519.5,912.8359,515.5,908.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="528.5" y="913.1826">std::shared_ptr&lt;TetrominoShape&gt; shape</text><polygon fill="none" points="519.5,921.1328,523.5,925.1328,519.5,929.1328,515.5,925.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="528.5" y="929.4795">CellColor color</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="528.5" y="945.7764">&#160;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="955.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="528.5" y="962.0732">bool canMove</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="972.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="528.5" y="978.3701">bool lockedInPlace</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="528.5" y="994.667">&#160;</text><ellipse cx="519.5" cy="1007.6172" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="528.5" y="1010.9639">static const std::vector&lt;CellColor&gt; tetromino_colors</text><line style="stroke:#181818;stroke-width:0.5;" x1="509.5" x2="1131.5" y1="1018.2656" y2="1018.2656"/><ellipse cx="519.5" cy="1031.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="528.5" y="1035.2607">Tetromino()</text><ellipse cx="519.5" cy="1048.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="598" x="528.5" y="1051.5576">Tetromino(Coordinate coord, CellColor color, const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;s)</text><ellipse cx="519.5" cy="1064.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="528.5" y="1067.8545">virtual ~Tetromino()</text><ellipse cx="519.5" cy="1080.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="528.5" y="1084.1514">Coordinate getCoordinate() const</text><ellipse cx="519.5" cy="1097.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="528.5" y="1100.4482">Coordinate &amp;getCoordinate()</text><ellipse cx="519.5" cy="1113.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="528.5" y="1116.7451">CellColor getColor() const</text><ellipse cx="519.5" cy="1129.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="369" x="528.5" y="1133.042">std::shared_ptr&lt;TetrominoShape&gt; getShape() const</text><ellipse cx="519.5" cy="1145.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="528.5" y="1149.3389">int getId() const</text><ellipse cx="519.5" cy="1162.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="528.5" y="1165.6357">bool hasChanged()</text><ellipse cx="519.5" cy="1178.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="528.5" y="1181.9326">bool shouldBroadcastState()</text><ellipse cx="519.5" cy="1194.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="528.5" y="1198.2295">nlohmann::json serialize() const</text><ellipse cx="519.5" cy="1211.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="528.5" y="1214.5264">void deserialize(const nlohmann::json &amp;data)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="1224.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="528.5" y="1230.8232">void setShape(std::vector&lt;std::vector&lt;int&gt;&gt; &amp;s)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="1240.7734"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="272" x="528.5" y="1247.1201">void setCoordinate(Coordinate &amp;coord)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="516.5" y="1257.0703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="528.5" y="1263.417">void setChanged(bool c)</text></g><!--class TetrominoShape--><g id="elem_TetrominoShape"><rect codeLine="267" fill="#F1F1F1" height="178.375" id="TetrominoShape" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="481" x="381" y="1404.5"/><ellipse cx="559.75" cy="1420.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M562.7188,1426.1406 Q562.1406,1426.4375 561.5,1426.5781 Q560.8594,1426.7344 560.1563,1426.7344 Q557.6563,1426.7344 556.3281,1425.0938 Q555.0156,1423.4375 555.0156,1420.3125 Q555.0156,1417.1875 556.3281,1415.5313 Q557.6563,1413.875 560.1563,1413.875 Q560.8594,1413.875 561.5,1414.0313 Q562.1563,1414.1875 562.7188,1414.4844 L562.7188,1417.2031 Q562.0938,1416.625 561.5,1416.3594 Q560.9063,1416.0781 560.2813,1416.0781 Q558.9375,1416.0781 558.25,1417.1563 Q557.5625,1418.2188 557.5625,1420.3125 Q557.5625,1422.4063 558.25,1423.4844 Q558.9375,1424.5469 560.2813,1424.5469 Q560.9063,1424.5469 561.5,1424.2813 Q562.0938,1424 562.7188,1423.4219 L562.7188,1426.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="580.25" y="1425.3467">TetrominoShape</text><line style="stroke:#181818;stroke-width:0.5;" x1="382" x2="861" y1="1436.5" y2="1436.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="389" y="1447.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="401" y="1453.4951">std::vector&lt;std::vector&lt;int&gt;&gt; shape</text><line style="stroke:#181818;stroke-width:0.5;" x1="382" x2="861" y1="1460.7969" y2="1460.7969"/><ellipse cx="392" cy="1474.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="401" y="1477.792">TetrominoShape()</text><ellipse cx="392" cy="1490.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="442" x="401" y="1494.0889">TetrominoShape(const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;shape)</text><ellipse cx="392" cy="1507.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="401" y="1510.3857">const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;getShape() const</text><ellipse cx="392" cy="1523.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="455" x="401" y="1526.6826">void setShape(const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;newShape)</text><ellipse cx="392" cy="1539.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="401" y="1542.9795">nlohmann::json serialize() const</text><ellipse cx="392" cy="1555.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="401" y="1559.2764">void deserialize(const nlohmann::json &amp;data)</text><ellipse cx="392" cy="1572.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="401" y="1575.5732">void invertShape()</text></g><!--class ThreadSafeQueue--><g id="elem_ThreadSafeQueue"><rect codeLine="282" fill="#F1F1F1" height="178.375" id="ThreadSafeQueue" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="227" x="3078" y="284"/><ellipse cx="3119.1" cy="300" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3122.0688,305.6406 Q3121.4906,305.9375 3120.85,306.0781 Q3120.2094,306.2344 3119.5063,306.2344 Q3117.0063,306.2344 3115.6781,304.5938 Q3114.3656,302.9375 3114.3656,299.8125 Q3114.3656,296.6875 3115.6781,295.0313 Q3117.0063,293.375 3119.5063,293.375 Q3120.2094,293.375 3120.85,293.5313 Q3121.5063,293.6875 3122.0688,293.9844 L3122.0688,296.7031 Q3121.4438,296.125 3120.85,295.8594 Q3120.2563,295.5781 3119.6313,295.5781 Q3118.2875,295.5781 3117.6,296.6563 Q3116.9125,297.7188 3116.9125,299.8125 Q3116.9125,301.9063 3117.6,302.9844 Q3118.2875,304.0469 3119.6313,304.0469 Q3120.2563,304.0469 3120.85,303.7813 Q3121.4438,303.5 3122.0688,302.9219 L3122.0688,305.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="3138.9" y="304.8467">ThreadSafeQueue</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="9" x="3299" y="281"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="7" x="3300" y="293.1387">T</text><line style="stroke:#181818;stroke-width:0.5;" x1="3079" x2="3304" y1="316" y2="316"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3086" y="326.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="3098" y="332.9951">std::queue&lt;T&gt; queue_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3086" y="342.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="3098" y="349.292">std::mutex mutex_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3086" y="359.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="3098" y="365.5889">std::condition_variable cond_</text><line style="stroke:#181818;stroke-width:0.5;" x1="3079" x2="3304" y1="372.8906" y2="372.8906"/><ellipse cx="3089" cy="386.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="3098" y="389.8857">void push(T value)</text><ellipse cx="3089" cy="402.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="3098" y="406.1826">bool pop(T &amp;value)</text><ellipse cx="3089" cy="419.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="3098" y="422.4795">void wait_and_pop(T &amp;value)</text><ellipse cx="3089" cy="435.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="3098" y="438.7764">bool empty() const</text><ellipse cx="3089" cy="451.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="3098" y="455.0732">void clear()</text></g><!--link Cell to ISerializable--><g id="link_Cell_ISerializable"><path codeLine="35" d="M1422.61,1205.57 C1475.57,1334.76 1521.2,1513.99 1451.5,1656 C1439.81,1679.83 1434.3108,1688.9389 1413.2608,1705.0289 " fill="none" id="Cell-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1398.96,1715.96,1416.9044,1709.7958,1409.6171,1700.262,1398.96,1715.96" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link Cell to Coordinate--><g id="link_Cell_Coordinate"><path codeLine="36" d="M1257.7445,1216.6602 C1233.7545,1271.6902 1212.43,1320.6 1190.3,1371.37 " fill="none" id="Cell-backto-Coordinate" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1262.54,1205.66,1256.4756,1209.5616,1257.7445,1216.6602,1263.809,1212.7586,1262.54,1205.66" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Cell to CellColor--><g id="link_Cell_CellColor"><path codeLine="37" d="M1355.45,1205.66 C1366.59,1305.33 1378.8432,1415.0272 1384.2532,1463.4072 " fill="none" id="Cell-to-CellColor" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1384.92,1469.37,1387.895,1459.9812,1384.3643,1464.401,1379.9446,1460.8703,1384.92,1469.37" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Coordinate to ISerializable--><g id="link_Coordinate_ISerializable"><path codeLine="65" d="M1216.3,1615.62 C1239.34,1651.04 1253.3866,1672.6204 1271.5766,1700.5904 " fill="none" id="Coordinate-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1281.39,1715.68,1276.6065,1697.3192,1266.5467,1703.8615,1281.39,1715.68" style="stroke:#181818;stroke-width:1.0;"/></g><!--link EndGameData to ISerializable--><g id="link_EndGameData_ISerializable"><path codeLine="78" d="M248.29,1574.55 C280.41,1605.19 320.67,1637.25 363.5,1656 C431.12,1685.6 845.8648,1724.5041 1103.0448,1746.3841 " fill="none" id="EndGameData-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1120.98,1747.91,1103.5534,1740.4057,1102.5362,1752.3625,1120.98,1747.91" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link EndGameData to PlayerData--><g id="link_EndGameData_PlayerData"><path codeLine="79" d="M263.5296,1583.0037 C295.1096,1611.8537 324.43,1634.46 363.5,1656 C616.87,1795.73 946.39,1876.53 1143,1915.56 " fill="none" id="EndGameData-backto-PlayerData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="254.67,1574.91,256.4019,1581.91,263.5296,1583.0037,261.7977,1576.0037,254.67,1574.91" style="stroke:#181818;stroke-width:1.0;"/></g><!--link GameStatus to ISerializable--><g id="link_GameStatus_ISerializable"><path codeLine="103" d="M1611.4,1640.67 C1602.42,1646.02 1593.43,1651.15 1584.5,1656 C1542.78,1678.65 1512.0389,1692.6089 1468.5089,1709.4389 " fill="none" id="GameStatus-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1451.72,1715.93,1470.6726,1715.0352,1466.3452,1703.8426,1451.72,1715.93" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link NetworkManager to Logger--><g id="link_NetworkManager_Logger"><path codeLine="159" d="M1963.9808,749.4437 C1906.1308,843.2437 1856.96,922.98 1822.83,978.32 " fill="none" id="NetworkManager-backto-Logger" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1970.28,739.23,1963.7258,742.2371,1963.9808,749.4437,1970.535,746.4366,1970.28,739.23" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link NetworkManager to Packet--><g id="link_NetworkManager_Packet"><path codeLine="160" d="M2248.0669,751.1151 C2256.3269,810.3651 2262.72,856.21 2269.47,904.64 " fill="none" id="NetworkManager-backto-Packet" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2246.41,739.23,2243.2768,745.7248,2248.0669,751.1151,2251.2001,744.6202,2246.41,739.23" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link ISerializable to PlayerData--><g id="link_ISerializable_PlayerData"><path d="M1312.5,1831.13 C1312.5,1849.41 1312.5,1852.71 1312.5,1872.78 " fill="none" id="ISerializable-backto-PlayerData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1312.5,1813.13,1306.5,1831.13,1318.5,1831.13,1312.5,1813.13" style="stroke:#181818;stroke-width:1.0;"/></g><!--link PlayerList to ISerializable--><g id="link_PlayerList_ISerializable"><path codeLine="205" d="M2133.83,1591.19 C2102.11,1615.99 2065.72,1640.11 2028.5,1656 C1860.58,1727.68 1670.6828,1751.6407 1522.2628,1759.8107 " fill="none" id="PlayerList-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1504.29,1760.8,1522.5926,1765.8016,1521.933,1753.8197,1504.29,1760.8" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link PlayerList to PlayerData--><g id="link_PlayerList_PlayerData"><path codeLine="206" d="M2114.4961,1598.4904 C2084.5561,1621.4404 2061.02,1637.35 2028.5,1656 C1851.17,1757.71 1631.03,1840.8 1482.01,1891.36 " fill="none" id="PlayerList-backto-PlayerData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2124.02,1591.19,2116.8246,1591.6656,2114.4961,1598.4904,2121.6915,1598.0148,2124.02,1591.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--link TetrisBoard to ISerializable--><g id="link_TetrisBoard_ISerializable"><path codeLine="228" d="M1569.05,527.66 C1586.67,826.23 1609.77,1471.62 1495.5,1656 C1480.17,1680.74 1472.1687,1690.9659 1447.2787,1706.3959 " fill="none" id="TetrisBoard-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1431.98,1715.88,1450.4401,1711.4955,1444.1174,1701.2963,1431.98,1715.88" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link TetrisBoard to Cell--><g id="link_TetrisBoard_Cell"><path codeLine="229" d="M1502.9042,539.2838 C1468.9842,640.1238 1428.45,760.63 1393.52,864.47 " fill="none" id="TetrisBoard-backto-Cell" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1506.73,527.91,1501.0258,532.3216,1502.9042,539.2838,1508.6083,534.8722,1506.73,527.91" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link TetrisBoard to Logger--><g id="link_TetrisBoard_Logger"><path codeLine="230" d="M1616.0795,539.2414 C1666.3295,683.4114 1734.72,879.67 1769.03,978.13 " fill="none" id="TetrisBoard-backto-Logger" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1612.13,527.91,1610.3276,534.8922,1616.0795,539.2414,1617.8819,532.2592,1612.13,527.91" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Tetromino to ISerializable--><g id="link_Tetromino_ISerializable"><path codeLine="262" d="M868.37,1271.06 C904,1444.92 947.05,1652.25 950.5,1656 C994.47,1703.74 1041.0854,1726.3944 1103.1654,1741.4244 " fill="none" id="Tetromino-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1120.66,1745.66,1104.5773,1735.5929,1101.7536,1747.256,1120.66,1745.66" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Tetromino to CellColor--><g id="link_Tetromino_CellColor"><path codeLine="263" d="M1132.63,1262.06 C1138.26,1265.12 1143.89,1268.1 1149.5,1271 C1222.2,1308.5 1264.36,1274.48 1323.5,1331 C1363.18,1368.93 1377.8177,1428.6293 1383.5277,1463.3993 " fill="none" id="Tetromino-to-CellColor" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1384.5,1469.32,1386.9887,1459.7908,1383.6897,1464.3861,1379.0944,1461.0872,1384.5,1469.32" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link Tetromino to Coordinate--><g id="link_Tetromino_Coordinate"><path codeLine="264" d="M990.7246,1281.1266 C1014.7446,1315.7166 1031.77,1340.24 1053.28,1371.21 " fill="none" id="Tetromino-backto-Coordinate" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="983.88,1271.27,984.0168,1278.4798,990.7246,1281.1266,990.5878,1273.9167,983.88,1271.27" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link Tetromino to TetrominoShape--><g id="link_Tetromino_TetrominoShape"><path codeLine="265" d="M713.145,1282.2704 C692.405,1329.8504 676.64,1366.01 659.86,1404.5 " fill="none" id="Tetromino-backto-TetrominoShape" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="717.94,1271.27,711.8757,1275.1718,713.145,1282.2704,719.2093,1278.3685,717.94,1271.27" style="stroke:#181818;stroke-width:1.0;"/></g><!--link TetrominoShape to ISerializable--><g id="link_TetrominoShape_ISerializable"><path codeLine="279" d="M750.35,1582.61 C793.21,1609.03 842.13,1636.22 889.5,1656 C962.83,1686.62 1029.5365,1706.1286 1103.4365,1723.2886 " fill="none" id="TetrominoShape-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1120.97,1727.36,1104.7936,1717.4441,1102.0794,1729.1331,1120.97,1727.36" style="stroke:#181818;stroke-width:1.0;"/></g><!--SRC=[lLdTSzis37_FNy6xtcLsslIwZuTTblbkJRekktvajRUrJpvMOYokCgcHb5ElQ__s0IGbaJGLPn-P7sGA044G_044gQAcMfEBELESrlmF-hPcvCC1WT_z3LUcfJNv574dqvWhQbcjgH0d9xzfAOZseY172YcqYQKtafUaP8EKbKcL79RKqEd1nuE3pqXX3Km4d8N01H4dSCRg6iYMVemlSqCD8ngV0_5CrbA1NV3qH2bLoGMA5dtJiRWmfE6iO1VbG93NWgcBSpVEVLGvILLu_tooJF-2NLVCl7IzOzTutgKRAd4RkaiFJ9JbtGZ3XA2xRSIT1oy0tpRoobtNm3tJcE-w1ZvD-Dsih7yItfDrOxQT5_P1XSWDKugNBD2n7oluj5Yn43W-_dEMmDanvF4n6PRAqHu-d95-tZsIQbcywsB0lKsqAKzEj55ShCYQKTqgjcR2lA1hvkVca0rmKsOIaPWeUq8jeRzzi9escfNFUQ6aPZ2nKlUBuz16x9X5fQIG9oU6hzcoaU3YquXUyLMrL4pBkZLSYcM1viwS7Gli4ohBJs1vC0JH0EL-_ZsfdqL0mYL__mkj7n1iRQ7L2NbKlvuaX3UnTsXPldPQKl8RIzx6xaM5kz8QrKRIjqjAv6yXp7lI3X-qjnPwW-Ds0GXfAk0Zvk81Eky_4ULJM8zpo7sz-t448msjBt7jTUXB4CKL3aWr5qo_Oci8ep8WNy70zJEsORKdMZ1iM66aEhsiwPOf77D66jlMT-B3FgE7iym5QyZ7c1qC13-6p757eWYcgbRtVXn8FVu-PMXlfQo9hcHRbzPXFpSMLuhztdB5ocVeuE-byZpoBVdyKOBlUI5LwYBFihtoh0KkiTL-LZCA8ure22HUYaN5TKvd5q7E5Eogqt1ntIncqhZRDSLYC1KRCmM5Y_yf33LEC7YlUumV3u4J6XhAvkr7X0RmoGPpmCzXq8FmcLojcEe1w5wZZKG4kySdpu_SZ6wGDLlMSkLT4dO_NEjLwCSuoLiZCBqFsVq5CzTIlNjE1GqjSvhH9y89BAyGxqmKspvVKCEBG12sQGsxZMV7UeVu6g7RgIcsujemzGoVK3vCBcdn3k9Wsx07RXvNhIXmIpj5UJzz9qGEfxCeOBb-rGe1iqvm5VgZ1Rk__69fv98tcwyctIlXpHBGhARV-3vFmEeV98nrj7ADtkumQwBK9GCd7irixGPDFKc2J9JEtDJsKEgjahGig3OZebRsNeUbezh-U-9WQINzbEzrNHkgD8jqMeiTymWSxjiFo30JBLjLC6nFlJ9hOaL5MNUwEikQdTvDs2yizgL0WJCf1BXkadI03FfelDCvXmZVsm_b5rI_csFDup4tcUvoPJCmmu1f1UpD3DB0SasRKmJ6rqjpAn3E88iu-EfG8SHEoqwTs8p8rgnWxrwvzni4kIZaEY-uRWrxtsjwZc-xxAx_3XkhIswhmms5H8QxRAVgh6FjaUzqP-LDfHWjk-oni6yPFaR4A5F1-OPls2wV6XYuECKudv4rvG8NSrG0nm0pH_bk69Jm8XOVZP85qnenzcG3LV6aRv53Xd_JZFH5l5oJI0RjU1alV2yGHc81qpLie2GGSs4MQSRfno0F6FFXi15GNpdVJcpvbMm2M66vx9BZE3jWoqjuuwMNjxpRMwAqWScTH4a3zdm3eIpQkcwCcjxKATZ_V0xsaJg3sl8VwhIdwNzbJrox7khWRR_Ux6ICV4Ml_OYPAWcFr5vjc1EdqLwUznBiKrWt9rgJ8WitCxgjOLVwJly8X4GwyC7A_IS2Wqr-MqnFjQ4NuH56Qcen7Xd2cEdJlxiOyb2x0OlzoO6mzv2cov5xhZivwMHACdUyiZNPK8VoSgIWzPMDtpYXTlqOpmihfo7EUj9GVcLeTp7HCU251ql4ddlNkQ4ABCDxVdBGSFGkCGvBUkZScLILUFRTsoC3kjmn61mUk3fp50YuoKdLhzI2mShhnvAgib-gW6OFIvNBGzVzkeK2qUmQG94vPs_RLVvq-2ilJPLd_S3ugZAvyjZFVwUjApmPBI5TdU8DsMpcLl6fuebLTl6yjTbyDKS4sLiJVqkKd9XVIBMsCEklV6vAKFzbS6RAQXU7r-Z9uBsoxil0vZPkMwa-nZkNj8tt8q0in4W6Oo7x2AymGMj437Rm07LOciW8SvRIBzr0IQ-l7v3aeZotzuPjS122OxXZw3uRx8uQZ6Mlh8UhnMWj0x73HAwJs7FrJTB5w6sPLxHXzj1cM_bmIQ_XNJAkg3w3qz2AbRdxeiVTKSxVjDyzV6_uTa5sFbuuKmjdVm97vudRhU_GArYMSC62Ro21hFURCw8_r-vR9Or_NZRzV1DDYuhdaFX34jw3i_92G58ks47k8YESOwyS2h3EXgKTHtSnwY9g948TC_wSCD2FuayF0mDZDvxpJWnRwcuWU_3coRUBLnGTtxupFKPY9aRHhJG9TZqFXx-xkiHsuMB3L6VxmPuqxanqo0kNtYr4Pltx9RDdrpczOZ_XkPwSBcOVeksxrTLaGJQqRbcKFnhP0FqmOjWUrvIR9HKG6na9svMvpsiZ9LKoMNVTi9WHsrZktY3OvtBFLG2Iy9FHNm00]--></g></svg>