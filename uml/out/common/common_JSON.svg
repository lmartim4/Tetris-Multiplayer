<?xml version="1.0" encoding="us-ascii" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1862px" preserveAspectRatio="none" style="width:3532px;height:1862px;background:#FFFFFF;" version="1.1" viewBox="0 0 3532 1862" width="3532px" zoomAndPan="magnify"><defs/><g><!--class ISerializable--><g id="elem_ISerializable"><rect codeLine="2" fill="#F1F1F1" height="96.8906" id="ISerializable" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="383" x="768.96" y="1553"/><ellipse cx="916.21" cy="1569" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M919.1788,1574.6406 Q918.6006,1574.9375 917.96,1575.0781 Q917.3194,1575.2344 916.6163,1575.2344 Q914.1163,1575.2344 912.7881,1573.5938 Q911.4756,1571.9375 911.4756,1568.8125 Q911.4756,1565.6875 912.7881,1564.0313 Q914.1163,1562.375 916.6163,1562.375 Q917.3194,1562.375 917.96,1562.5313 Q918.6163,1562.6875 919.1788,1562.9844 L919.1788,1565.7031 Q918.5538,1565.125 917.96,1564.8594 Q917.3663,1564.5781 916.7413,1564.5781 Q915.3975,1564.5781 914.71,1565.6563 Q914.0225,1566.7188 914.0225,1568.8125 Q914.0225,1570.9063 914.71,1571.9844 Q915.3975,1573.0469 916.7413,1573.0469 Q917.3663,1573.0469 917.96,1572.7813 Q918.5538,1572.5 919.1788,1571.9219 L919.1788,1574.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="936.71" y="1573.8467">ISerializable</text><line style="stroke:#181818;stroke-width:0.5;" x1="769.96" x2="1150.96" y1="1585" y2="1585"/><line style="stroke:#181818;stroke-width:0.5;" x1="769.96" x2="1150.96" y1="1593" y2="1593"/><ellipse cx="779.96" cy="1606.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="788.96" y="1609.9951">virtual ~ISerializable()</text><ellipse cx="779.96" cy="1622.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="265" x="788.96" y="1626.292">virtual nlohmann::json serialize() const</text><ellipse cx="779.96" cy="1639.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="788.96" y="1642.5889">virtual void deserialize(const nlohmann::json &amp;data)</text></g><!--class nlohmann::json--><g id="elem_nlohmann::json"><rect codeLine="8" fill="#F1F1F1" height="48" id="nlohmann::json" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="140" x="2482.46" y="1577.5"/><ellipse cx="2497.46" cy="1593.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2500.4288,1599.1406 Q2499.8506,1599.4375 2499.21,1599.5781 Q2498.5694,1599.7344 2497.8663,1599.7344 Q2495.3663,1599.7344 2494.0381,1598.0938 Q2492.7256,1596.4375 2492.7256,1593.3125 Q2492.7256,1590.1875 2494.0381,1588.5313 Q2495.3663,1586.875 2497.8663,1586.875 Q2498.5694,1586.875 2499.21,1587.0313 Q2499.8663,1587.1875 2500.4288,1587.4844 L2500.4288,1590.2031 Q2499.8038,1589.625 2499.21,1589.3594 Q2498.6163,1589.0781 2497.9913,1589.0781 Q2496.6475,1589.0781 2495.96,1590.1563 Q2495.2725,1591.2188 2495.2725,1593.3125 Q2495.2725,1595.4063 2495.96,1596.4844 Q2496.6475,1597.5469 2497.9913,1597.5469 Q2498.6163,1597.5469 2499.21,1597.2813 Q2499.8038,1597 2500.4288,1596.4219 L2500.4288,1599.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="2511.46" y="1598.3467">nlohmann::json</text><line style="stroke:#181818;stroke-width:0.5;" x1="2483.46" x2="2621.46" y1="1609.5" y2="1609.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="2483.46" x2="2621.46" y1="1617.5" y2="1617.5"/></g><!--class Cell--><g id="elem_Cell"><rect codeLine="12" fill="#F1F1F1" height="341.3438" id="Cell" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="338" x="763.46" y="571.5"/><ellipse cx="915.71" cy="587.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M918.6788,593.1406 Q918.1006,593.4375 917.46,593.5781 Q916.8194,593.7344 916.1163,593.7344 Q913.6163,593.7344 912.2881,592.0938 Q910.9756,590.4375 910.9756,587.3125 Q910.9756,584.1875 912.2881,582.5313 Q913.6163,580.875 916.1163,580.875 Q916.8194,580.875 917.46,581.0313 Q918.1163,581.1875 918.6788,581.4844 L918.6788,584.2031 Q918.0538,583.625 917.46,583.3594 Q916.8663,583.0781 916.2413,583.0781 Q914.8975,583.0781 914.21,584.1563 Q913.5225,585.2188 913.5225,587.3125 Q913.5225,589.4063 914.21,590.4844 Q914.8975,591.5469 916.2413,591.5469 Q916.8663,591.5469 917.46,591.2813 Q918.0538,591 918.6788,590.4219 L918.6788,593.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="25" x="936.21" y="592.3467">Cell</text><line style="stroke:#181818;stroke-width:0.5;" x1="764.46" x2="1100.46" y1="603.5" y2="603.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="771.46" y="614.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="783.46" y="620.4951">CellState state</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="771.46" y="630.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="783.46" y="636.792">CellColor color</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="771.46" y="646.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="783.46" y="653.0889">Coordinate coordinate</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="771.46" y="663.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="783.46" y="669.3857">int pieceId</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="771.46" y="679.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="783.46" y="685.6826">int ownerID</text><line style="stroke:#181818;stroke-width:0.5;" x1="764.46" x2="1100.46" y1="692.9844" y2="692.9844"/><ellipse cx="774.46" cy="706.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="783.46" y="709.9795">Cell(Coordinate coord)</text><ellipse cx="774.46" cy="722.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="783.46" y="726.2764">~Cell()</text><ellipse cx="774.46" cy="739.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="783.46" y="742.5732">int getOwnerID() const</text><ellipse cx="774.46" cy="755.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="783.46" y="758.8701">int getPieceId() const</text><ellipse cx="774.46" cy="771.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="147" x="783.46" y="775.167">void setPieceId(int id)</text><ellipse cx="774.46" cy="788.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="783.46" y="791.4639">CellColor getColor() const</text><ellipse cx="774.46" cy="804.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="783.46" y="807.7607">CellState getState() const</text><ellipse cx="774.46" cy="820.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="783.46" y="824.0576">void setColor(CellColor c)</text><ellipse cx="774.46" cy="837.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="173" x="783.46" y="840.3545">void setState(CellState s)</text><ellipse cx="774.46" cy="853.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="783.46" y="856.6514">void setOwnerID(int o)</text><ellipse cx="774.46" cy="869.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="783.46" y="872.9482">void setEmpty()</text><ellipse cx="774.46" cy="885.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="783.46" y="889.2451">nlohmann::json serialize() const override</text><ellipse cx="774.46" cy="902.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="783.46" y="905.542">void deserialize(const nlohmann::json &amp;json)</text></g><!--class Coordinate--><g id="elem_Coordinate"><rect codeLine="49" fill="#F1F1F1" height="243.5625" id="Coordinate" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="338" x="1743.46" y="1208.5"/><ellipse cx="1870.21" cy="1224.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1873.1787,1230.1406 Q1872.6006,1230.4375 1871.96,1230.5781 Q1871.3194,1230.7344 1870.6162,1230.7344 Q1868.1162,1230.7344 1866.7881,1229.0938 Q1865.4756,1227.4375 1865.4756,1224.3125 Q1865.4756,1221.1875 1866.7881,1219.5313 Q1868.1162,1217.875 1870.6162,1217.875 Q1871.3194,1217.875 1871.96,1218.0313 Q1872.6162,1218.1875 1873.1787,1218.4844 L1873.1787,1221.2031 Q1872.5537,1220.625 1871.96,1220.3594 Q1871.3662,1220.0781 1870.7412,1220.0781 Q1869.3975,1220.0781 1868.71,1221.1563 Q1868.0225,1222.2188 1868.0225,1224.3125 Q1868.0225,1226.4063 1868.71,1227.4844 Q1869.3975,1228.5469 1870.7412,1228.5469 Q1871.3662,1228.5469 1871.96,1228.2813 Q1872.5537,1228 1873.1787,1227.4219 L1873.1787,1230.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="1890.71" y="1229.3467">Coordinate</text><line style="stroke:#181818;stroke-width:0.5;" x1="1744.46" x2="2080.46" y1="1240.5" y2="1240.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1751.46" y="1251.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="1763.46" y="1257.4951">int x</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1751.46" y="1267.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="1763.46" y="1273.792">int y</text><line style="stroke:#181818;stroke-width:0.5;" x1="1744.46" x2="2080.46" y1="1281.0938" y2="1281.0938"/><ellipse cx="1754.46" cy="1294.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="1763.46" y="1298.0889">Coordinate()</text><ellipse cx="1754.46" cy="1311.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="1763.46" y="1314.3857">Coordinate(int xVal, int yVal)</text><ellipse cx="1754.46" cy="1327.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="1763.46" y="1330.6826">int getX()</text><ellipse cx="1754.46" cy="1343.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="63" x="1763.46" y="1346.9795">int getY()</text><ellipse cx="1754.46" cy="1359.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="1763.46" y="1363.2764">void addX(int x)</text><ellipse cx="1754.46" cy="1376.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="105" x="1763.46" y="1379.5732">void addY(int y)</text><ellipse cx="1754.46" cy="1392.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="1763.46" y="1395.8701">void setX(int x)</text><ellipse cx="1754.46" cy="1408.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="1763.46" y="1412.167">void setY(int y)</text><ellipse cx="1754.46" cy="1425.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="1763.46" y="1428.4639">nlohmann::json serialize() const</text><ellipse cx="1754.46" cy="1441.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="1763.46" y="1444.7607">void deserialize(const nlohmann::json &amp;json)</text></g><!--class CellColor--><g id="elem_CellColor"><rect fill="#F1F1F1" height="48" id="CellColor" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="93" x="691.96" y="1306.5"/><ellipse cx="706.96" cy="1322.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M709.9288,1328.1406 Q709.3506,1328.4375 708.71,1328.5781 Q708.0694,1328.7344 707.3663,1328.7344 Q704.8663,1328.7344 703.5381,1327.0938 Q702.2256,1325.4375 702.2256,1322.3125 Q702.2256,1319.1875 703.5381,1317.5313 Q704.8663,1315.875 707.3663,1315.875 Q708.0694,1315.875 708.71,1316.0313 Q709.3663,1316.1875 709.9288,1316.4844 L709.9288,1319.2031 Q709.3038,1318.625 708.71,1318.3594 Q708.1163,1318.0781 707.4913,1318.0781 Q706.1475,1318.0781 705.46,1319.1563 Q704.7725,1320.2188 704.7725,1322.3125 Q704.7725,1324.4063 705.46,1325.4844 Q706.1475,1326.5469 707.4913,1326.5469 Q708.1163,1326.5469 708.71,1326.2813 Q709.3038,1326 709.9288,1325.4219 L709.9288,1328.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="720.96" y="1327.3467">CellColor</text><line style="stroke:#181818;stroke-width:0.5;" x1="692.96" x2="783.96" y1="1338.5" y2="1338.5"/><line style="stroke:#181818;stroke-width:0.5;" x1="692.96" x2="783.96" y1="1346.5" y2="1346.5"/></g><!--class Clock--><g id="elem_Clock"><rect codeLine="39" fill="#F1F1F1" height="145.7813" id="Clock" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="529" x="1195.96" y="88.5"/><ellipse cx="1437.21" cy="104.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1440.1787,110.1406 Q1439.6006,110.4375 1438.96,110.5781 Q1438.3194,110.7344 1437.6162,110.7344 Q1435.1162,110.7344 1433.7881,109.0938 Q1432.4756,107.4375 1432.4756,104.3125 Q1432.4756,101.1875 1433.7881,99.5313 Q1435.1162,97.875 1437.6162,97.875 Q1438.3194,97.875 1438.96,98.0313 Q1439.6162,98.1875 1440.1787,98.4844 L1440.1787,101.2031 Q1439.5537,100.625 1438.96,100.3594 Q1438.3662,100.0781 1437.7412,100.0781 Q1436.3975,100.0781 1435.71,101.1563 Q1435.0225,102.2188 1435.0225,104.3125 Q1435.0225,106.4063 1435.71,107.4844 Q1436.3975,108.5469 1437.7412,108.5469 Q1438.3662,108.5469 1438.96,108.2813 Q1439.5537,108 1440.1787,107.4219 L1440.1787,110.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="1457.71" y="109.3467">Clock</text><line style="stroke:#181818;stroke-width:0.5;" x1="1196.96" x2="1723.96" y1="120.5" y2="120.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1203.96" y="131.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="503" x="1215.96" y="137.4951">std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; startTime_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1203.96" y="147.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="219" x="1215.96" y="153.792">std::string measurementName_</text><line style="stroke:#181818;stroke-width:0.5;" x1="1196.96" x2="1723.96" y1="161.0938" y2="161.0938"/><ellipse cx="1206.96" cy="174.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="1215.96" y="178.0889">Clock(std::string measurementName)</text><ellipse cx="1206.96" cy="191.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="1215.96" y="194.3857">void start()</text><ellipse cx="1206.96" cy="207.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="1215.96" y="210.6826">void end()</text><ellipse cx="1206.96" cy="223.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="1215.96" y="226.9795">long long elapsedMicroseconds() const</text></g><!--class EndGameData--><g id="elem_EndGameData"><rect codeLine="68" fill="#F1F1F1" height="162.0781" id="EndGameData" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="339" x="2505.96" y="1249.5"/><ellipse cx="2621.21" cy="1265.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2624.1788,1271.1406 Q2623.6006,1271.4375 2622.96,1271.5781 Q2622.3194,1271.7344 2621.6163,1271.7344 Q2619.1163,1271.7344 2617.7881,1270.0938 Q2616.4756,1268.4375 2616.4756,1265.3125 Q2616.4756,1262.1875 2617.7881,1260.5313 Q2619.1163,1258.875 2621.6163,1258.875 Q2622.3194,1258.875 2622.96,1259.0313 Q2623.6163,1259.1875 2624.1788,1259.4844 L2624.1788,1262.2031 Q2623.5538,1261.625 2622.96,1261.3594 Q2622.3663,1261.0781 2621.7413,1261.0781 Q2620.3975,1261.0781 2619.71,1262.1563 Q2619.0225,1263.2188 2619.0225,1265.3125 Q2619.0225,1267.4063 2619.71,1268.4844 Q2620.3975,1269.5469 2621.7413,1269.5469 Q2622.3663,1269.5469 2622.96,1269.2813 Q2623.5538,1269 2624.1788,1268.4219 L2624.1788,1271.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="2641.71" y="1270.3467">EndGameData</text><line style="stroke:#181818;stroke-width:0.5;" x1="2506.96" x2="2843.96" y1="1281.5" y2="1281.5"/><ellipse cx="2516.96" cy="1295.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="2525.96" y="1298.4951">int totalPoints</text><ellipse cx="2516.96" cy="1311.4453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="2525.96" y="1314.792">int gameTime</text><ellipse cx="2516.96" cy="1327.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="119" x="2525.96" y="1331.0889">int linesRemoved</text><ellipse cx="2516.96" cy="1344.0391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="2525.96" y="1347.3857">int finalLevel</text><ellipse cx="2516.96" cy="1360.3359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="2525.96" y="1363.6826">std::vector&lt;PlayerData&gt; players</text><line style="stroke:#181818;stroke-width:0.5;" x1="2506.96" x2="2843.96" y1="1370.9844" y2="1370.9844"/><ellipse cx="2516.96" cy="1384.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="2525.96" y="1387.9795">nlohmann::json serialize() const</text><ellipse cx="2516.96" cy="1400.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="2525.96" y="1404.2764">void deserialize(const nlohmann::json &amp;data)</text></g><!--class PlayerData--><g id="elem_PlayerData"><rect codeLine="182" fill="#F1F1F1" height="145.7813" id="PlayerData" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="339" x="1034.96" y="1710"/><ellipse cx="1163.71" cy="1726" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1166.6788,1731.6406 Q1166.1006,1731.9375 1165.46,1732.0781 Q1164.8194,1732.2344 1164.1163,1732.2344 Q1161.6163,1732.2344 1160.2881,1730.5938 Q1158.9756,1728.9375 1158.9756,1725.8125 Q1158.9756,1722.6875 1160.2881,1721.0313 Q1161.6163,1719.375 1164.1163,1719.375 Q1164.8194,1719.375 1165.46,1719.5313 Q1166.1163,1719.6875 1166.6788,1719.9844 L1166.6788,1722.7031 Q1166.0538,1722.125 1165.46,1721.8594 Q1164.8663,1721.5781 1164.2413,1721.5781 Q1162.8975,1721.5781 1162.21,1722.6563 Q1161.5225,1723.7188 1161.5225,1725.8125 Q1161.5225,1727.9063 1162.21,1728.9844 Q1162.8975,1730.0469 1164.2413,1730.0469 Q1164.8663,1730.0469 1165.46,1729.7813 Q1166.0538,1729.5 1166.6788,1728.9219 L1166.6788,1731.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="1184.21" y="1730.8467">PlayerData</text><line style="stroke:#181818;stroke-width:0.5;" x1="1035.96" x2="1372.96" y1="1742" y2="1742"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1042.96" y="1752.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="1054.96" y="1758.9951">std::string playerName</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1042.96" y="1768.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="1054.96" y="1775.292">int id</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1042.96" y="1785.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="1054.96" y="1791.5889">int score</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1042.96" y="1801.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="1054.96" y="1807.8857">bool isConnected</text><line style="stroke:#181818;stroke-width:0.5;" x1="1035.96" x2="1372.96" y1="1815.1875" y2="1815.1875"/><ellipse cx="1045.96" cy="1828.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="1054.96" y="1832.1826">nlohmann::json serialize() const</text><ellipse cx="1045.96" cy="1845.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="1054.96" y="1848.4795">void deserialize(const nlohmann::json &amp;data)</text></g><!--class GameStatus--><g id="elem_GameStatus"><rect codeLine="82" fill="#F1F1F1" height="325.0469" id="GameStatus" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="400" x="1308.46" y="1168"/><ellipse cx="1461.71" cy="1184" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1464.6787,1189.6406 Q1464.1006,1189.9375 1463.46,1190.0781 Q1462.8194,1190.2344 1462.1162,1190.2344 Q1459.6162,1190.2344 1458.2881,1188.5938 Q1456.9756,1186.9375 1456.9756,1183.8125 Q1456.9756,1180.6875 1458.2881,1179.0313 Q1459.6162,1177.375 1462.1162,1177.375 Q1462.8194,1177.375 1463.46,1177.5313 Q1464.1162,1177.6875 1464.6787,1177.9844 L1464.6787,1180.7031 Q1464.0537,1180.125 1463.46,1179.8594 Q1462.8662,1179.5781 1462.2412,1179.5781 Q1460.8975,1179.5781 1460.21,1180.6563 Q1459.5225,1181.7188 1459.5225,1183.8125 Q1459.5225,1185.9063 1460.21,1186.9844 Q1460.8975,1188.0469 1462.2412,1188.0469 Q1462.8662,1188.0469 1463.46,1187.7813 Q1464.0537,1187.5 1464.6787,1186.9219 L1464.6787,1189.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="1482.21" y="1188.8467">GameStatus</text><line style="stroke:#181818;stroke-width:0.5;" x1="1309.46" x2="1707.46" y1="1200" y2="1200"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1316.46" y="1210.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="1328.46" y="1216.9951">int score</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1316.46" y="1226.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="1328.46" y="1233.292">int level</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1316.46" y="1243.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="1328.46" y="1249.5889">int totalLinesCleared</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1316.46" y="1259.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="1328.46" y="1265.8857">int linesClearedOnThisLevel</text><line style="stroke:#181818;stroke-width:0.5;" x1="1309.46" x2="1707.46" y1="1273.1875" y2="1273.1875"/><ellipse cx="1319.46" cy="1286.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1328.46" y="1290.1826">GameStatus()</text><ellipse cx="1319.46" cy="1303.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="1328.46" y="1306.4795">~GameStatus()</text><ellipse cx="1319.46" cy="1319.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="374" x="1328.46" y="1322.7764">bool shouldLevelUp(int requiredLinesForLevelUp = 10)</text><ellipse cx="1319.46" cy="1335.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="1328.46" y="1339.0732">int getScore() const</text><ellipse cx="1319.46" cy="1352.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1328.46" y="1355.3701">int getLevel() const</text><ellipse cx="1319.46" cy="1368.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="1328.46" y="1371.667">int getTotalLinesCleared() const</text><ellipse cx="1319.46" cy="1384.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="1328.46" y="1387.9639">int getLinesClearedOnThisLevel() const</text><ellipse cx="1319.46" cy="1400.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="1328.46" y="1404.2607">void addScore(int s)</text><ellipse cx="1319.46" cy="1417.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="1328.46" y="1420.5576">void setLevel(int l)</text><ellipse cx="1319.46" cy="1433.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="1328.46" y="1436.8545">void addTotalLinesCleared(int t)</text><ellipse cx="1319.46" cy="1449.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="1328.46" y="1453.1514">void addLinesClearedOnThisLevel(int c)</text><ellipse cx="1319.46" cy="1466.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="1328.46" y="1469.4482">nlohmann::json serialize() const</text><ellipse cx="1319.46" cy="1482.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="312" x="1328.46" y="1485.7451">void deserialize(const nlohmann::json &amp;json)</text></g><!--class Logger--><g id="elem_Logger"><rect codeLine="107" fill="#F1F1F1" height="113.1875" id="Logger" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="354" x="2116.46" y="1274"/><ellipse cx="2265.21" cy="1290" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2268.1788,1295.6406 Q2267.6006,1295.9375 2266.96,1296.0781 Q2266.3194,1296.2344 2265.6163,1296.2344 Q2263.1163,1296.2344 2261.7881,1294.5938 Q2260.4756,1292.9375 2260.4756,1289.8125 Q2260.4756,1286.6875 2261.7881,1285.0313 Q2263.1163,1283.375 2265.6163,1283.375 Q2266.3194,1283.375 2266.96,1283.5313 Q2267.6163,1283.6875 2268.1788,1283.9844 L2268.1788,1286.7031 Q2267.5538,1286.125 2266.96,1285.8594 Q2266.3663,1285.5781 2265.7413,1285.5781 Q2264.3975,1285.5781 2263.71,1286.6563 Q2263.0225,1287.7188 2263.0225,1289.8125 Q2263.0225,1291.9063 2263.71,1292.9844 Q2264.3975,1294.0469 2265.7413,1294.0469 Q2266.3663,1294.0469 2266.96,1293.7813 Q2267.5538,1293.5 2268.1788,1292.9219 L2268.1788,1295.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="48" x="2285.71" y="1294.8467">Logger</text><line style="stroke:#181818;stroke-width:0.5;" x1="2117.46" x2="2469.46" y1="1306" y2="1306"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2124.46" y="1316.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="2136.46" y="1322.9951">std::string className</text><line style="stroke:#181818;stroke-width:0.5;" x1="2117.46" x2="2469.46" y1="1330.2969" y2="1330.2969"/><ellipse cx="2127.46" cy="1343.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="2136.46" y="1347.292">Logger(std::string name)</text><ellipse cx="2127.46" cy="1360.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="2136.46" y="1363.5889">~Logger()</text><ellipse cx="2127.46" cy="1376.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="2136.46" y="1379.8857">void console_log(const std::string &amp;msg) const</text></g><!--class NetworkManager--><g id="elem_NetworkManager"><rect codeLine="114" fill="#F1F1F1" height="732.4688" id="NetworkManager" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="566" x="2615.46" y="376"/><ellipse cx="2835.71" cy="392" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2838.6788,397.6406 Q2838.1006,397.9375 2837.46,398.0781 Q2836.8194,398.2344 2836.1163,398.2344 Q2833.6163,398.2344 2832.2881,396.5938 Q2830.9756,394.9375 2830.9756,391.8125 Q2830.9756,388.6875 2832.2881,387.0313 Q2833.6163,385.375 2836.1163,385.375 Q2836.8194,385.375 2837.46,385.5313 Q2838.1163,385.6875 2838.6788,385.9844 L2838.6788,388.7031 Q2838.0538,388.125 2837.46,387.8594 Q2836.8663,387.5781 2836.2413,387.5781 Q2834.8975,387.5781 2834.21,388.6563 Q2833.5225,389.7188 2833.5225,391.8125 Q2833.5225,393.9063 2834.21,394.9844 Q2834.8975,396.0469 2836.2413,396.0469 Q2836.8663,396.0469 2837.46,395.7813 Q2838.0538,395.5 2838.6788,394.9219 L2838.6788,397.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="117" x="2856.21" y="396.8467">NetworkManager</text><line style="stroke:#181818;stroke-width:0.5;" x1="2616.46" x2="3180.46" y1="408" y2="408"/><ellipse cx="2626.46" cy="421.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="2635.46" y="424.9951">const int network_frequency</text><ellipse cx="2626.46" cy="437.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="155" x="2635.46" y="441.292">static const int version</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="2635.46" y="457.5889">&#160;</text><polygon fill="none" points="2626.46,465.5391,2630.46,469.5391,2626.46,473.5391,2622.46,469.5391" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="2635.46" y="473.8857">Logger *logger</text><polygon fill="none" points="2626.46,481.8359,2630.46,485.8359,2626.46,489.8359,2622.46,485.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="2635.46" y="490.1826">ENetHost *host</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="2635.46" y="506.4795">&#160;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="516.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="2635.46" y="522.7764">std::queue&lt;Packet&gt; outgoingPackets</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="532.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="2635.46" y="539.0732">std::queue&lt;Packet&gt; incomingPackets</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="549.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="2635.46" y="555.3701">std::mutex outgoingMutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="565.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="2635.46" y="571.667">std::mutex incomingMutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="581.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="2635.46" y="587.9639">std::condition_variable outgoingCondition</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="597.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="2635.46" y="604.2607">std::condition_variable incomingCondition</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="614.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="2635.46" y="620.5576">std::thread networkThread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="630.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="2635.46" y="636.8545">std::thread sendThread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="646.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="2635.46" y="653.1514">std::thread receiveThread</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="663.1016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="2635.46" y="669.4482">std::atomic&lt;bool&gt; mainTask</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="679.3984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="192" x="2635.46" y="685.7451">std::atomic&lt;bool&gt; sending</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="695.6953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="2635.46" y="702.042">std::atomic&lt;bool&gt; receiving</text><line style="stroke:#181818;stroke-width:0.5;" x1="2616.46" x2="3180.46" y1="709.3438" y2="709.3438"/><ellipse cx="2626.46" cy="722.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="2635.46" y="726.3389">NetworkManager()</text><ellipse cx="2626.46" cy="739.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="2635.46" y="742.6357">~NetworkManager()</text><ellipse cx="2626.46" cy="755.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="495" x="2635.46" y="758.9326">void registerListener(PacketType, std::function&lt;void(const Packet &amp;)&gt;)</text><ellipse cx="2626.46" cy="771.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="2635.46" y="775.2295">bool isRunning() const</text><ellipse cx="2626.46" cy="788.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="300" x="2635.46" y="791.5264">std::string uint32_to_ipv4(uint32_t ip_addr);</text><ellipse cx="2626.46" cy="804.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="2635.46" y="807.8232">ENetHost *getHost()</text><ellipse cx="2626.46" cy="820.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="252" x="2635.46" y="824.1201">std::vector&lt;ENetPeer *&gt; getPeers()</text><ellipse cx="2626.46" cy="837.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="2635.46" y="840.417">void sendPacket(const Packet &amp;)</text><ellipse cx="2626.46" cy="853.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="264" x="2635.46" y="856.7139">void broadcastPacket(const Packet &amp;)</text><polygon fill="#FFFF44" points="2626.46,864.6641,2630.46,868.6641,2626.46,872.6641,2622.46,868.6641" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="2635.46" y="873.0107">Packet parsePacket(const ENetPacket *enetPacket, ENetPeer *sourcePeer)</text><polygon fill="#FFFF44" points="2626.46,880.9609,2630.46,884.9609,2626.46,888.9609,2622.46,884.9609" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="362" x="2635.46" y="889.3076">void handlePacket(Packet &amp;packet, ENetPeer *peer)</text><polygon fill="#FFFF44" points="2626.46,897.2578,2630.46,901.2578,2626.46,905.2578,2622.46,901.2578" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="2635.46" y="905.6045">virtual void onPeerConnect(ENetPeer *peer) = 0</text><polygon fill="#FFFF44" points="2626.46,913.5547,2630.46,917.5547,2626.46,921.5547,2622.46,917.5547" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="2635.46" y="921.9014">virtual void onPeerDisconnect(ENetPeer *peer) = 0</text><polygon fill="#FFFF44" points="2626.46,929.8516,2630.46,933.8516,2626.46,937.8516,2622.46,933.8516" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="2635.46" y="938.1982">void TaskStartNetwork()</text><polygon fill="#FFFF44" points="2626.46,946.1484,2630.46,950.1484,2626.46,954.1484,2622.46,950.1484" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="164" x="2635.46" y="954.4951">void TaskStopNetwork()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="2635.46" y="970.792">&#160;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="980.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="540" x="2635.46" y="987.0889">std::unordered_map&lt;uint8_t, std::function&lt;void(const Packet &amp;)&gt;&gt; listeners</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="997.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="297" x="2635.46" y="1003.3857">void processENetEvent(ENetEvent &amp;event)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="1013.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="2635.46" y="1019.6826">void processIncomingPackets()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="1029.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="2635.46" y="1035.9795">void sendOutgoingPackets()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="1045.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="378" x="2635.46" y="1052.2764">ENetPacket *createENetPacket(const Packet &amp;packet)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="1062.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="2635.46" y="1068.5732">void TaskNetwork()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="1078.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="2635.46" y="1084.8701">void TaskSend()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2623.46" y="1094.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="2635.46" y="1101.167">void TaskReceive()</text></g><!--class Packet--><g id="elem_Packet"><rect codeLine="163" fill="#F1F1F1" height="259.8594" id="Packet" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="574" x="2951.46" y="1200.5"/><ellipse cx="3210.71" cy="1216.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3213.6788,1222.1406 Q3213.1006,1222.4375 3212.46,1222.5781 Q3211.8194,1222.7344 3211.1163,1222.7344 Q3208.6163,1222.7344 3207.2881,1221.0938 Q3205.9756,1219.4375 3205.9756,1216.3125 Q3205.9756,1213.1875 3207.2881,1211.5313 Q3208.6163,1209.875 3211.1163,1209.875 Q3211.8194,1209.875 3212.46,1210.0313 Q3213.1163,1210.1875 3213.6788,1210.4844 L3213.6788,1213.2031 Q3213.0538,1212.625 3212.46,1212.3594 Q3211.8663,1212.0781 3211.2413,1212.0781 Q3209.8975,1212.0781 3209.21,1213.1563 Q3208.5225,1214.2188 3208.5225,1216.3125 Q3208.5225,1218.4063 3209.21,1219.4844 Q3209.8975,1220.5469 3211.2413,1220.5469 Q3211.8663,1220.5469 3212.46,1220.2813 Q3213.0538,1220 3213.6788,1219.4219 L3213.6788,1222.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="3231.21" y="1221.3467">Packet</text><line style="stroke:#181818;stroke-width:0.5;" x1="2952.46" x2="3524.46" y1="1232.5" y2="1232.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2959.46" y="1243.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="2971.46" y="1249.4951">PacketType type</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2959.46" y="1259.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="2971.46" y="1265.792">std::vector&lt;uint8_t&gt; data</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2959.46" y="1275.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="2971.46" y="1282.0889">ENetPeer *peer</text><line style="stroke:#181818;stroke-width:0.5;" x1="2952.46" x2="3524.46" y1="1289.3906" y2="1289.3906"/><ellipse cx="2962.46" cy="1303.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="2971.46" y="1306.3857">Packet(PacketType t, ENetPeer *dest = nullptr)</text><ellipse cx="2962.46" cy="1319.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="547" x="2971.46" y="1322.6826">Packet(PacketType t, const std::vector&lt;uint8_t&gt; &amp;d, ENetPeer *dest = nullptr)</text><ellipse cx="2962.46" cy="1335.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="357" x="2971.46" y="1338.9795">Packet(PacketType t, int i, ENetPeer *dest = nullptr)</text><ellipse cx="2962.46" cy="1351.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="548" x="2971.46" y="1355.2764">Packet(PacketType t, const ISerializable &amp;serializable, ENetPeer *dest = nullptr)</text><ellipse cx="2962.46" cy="1368.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293" x="2971.46" y="1371.5732">std::vector&lt;uint8_t&gt; toRawPacket() const</text><ellipse cx="2962.46" cy="1384.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="214" x="2971.46" y="1387.8701">void setENetPeer(ENetPeer *p)</text><ellipse cx="2962.46" cy="1400.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="2971.46" y="1404.167">const std::vector&lt;uint8_t&gt; &amp;getData() const</text><ellipse cx="2962.46" cy="1417.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="2971.46" y="1420.4639">nlohmann::json getPayloadAsJson() const</text><ellipse cx="2962.46" cy="1433.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="2971.46" y="1436.7607">PacketType getType() const</text><ellipse cx="2962.46" cy="1449.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="2971.46" y="1453.0576">ENetPeer *getPeer() const</text></g><!--class PlayerList--><g id="elem_PlayerList"><rect codeLine="192" fill="#F1F1F1" height="194.6719" id="PlayerList" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="382" x="891.46" y="1233"/><ellipse cx="1046.21" cy="1249" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1049.1788,1254.6406 Q1048.6006,1254.9375 1047.96,1255.0781 Q1047.3194,1255.2344 1046.6163,1255.2344 Q1044.1163,1255.2344 1042.7881,1253.5938 Q1041.4756,1251.9375 1041.4756,1248.8125 Q1041.4756,1245.6875 1042.7881,1244.0313 Q1044.1163,1242.375 1046.6163,1242.375 Q1047.3194,1242.375 1047.96,1242.5313 Q1048.6163,1242.6875 1049.1788,1242.9844 L1049.1788,1245.7031 Q1048.5538,1245.125 1047.96,1244.8594 Q1047.3663,1244.5781 1046.7413,1244.5781 Q1045.3975,1244.5781 1044.71,1245.6563 Q1044.0225,1246.7188 1044.0225,1248.8125 Q1044.0225,1250.9063 1044.71,1251.9844 Q1045.3975,1253.0469 1046.7413,1253.0469 Q1047.3663,1253.0469 1047.96,1252.7813 Q1048.5538,1252.5 1049.1788,1251.9219 L1049.1788,1254.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="1066.71" y="1253.8467">PlayerList</text><line style="stroke:#181818;stroke-width:0.5;" x1="892.46" x2="1272.46" y1="1265" y2="1265"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="899.46" y="1275.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="911.46" y="1281.9951">std::vector&lt;PlayerData&gt; players</text><line style="stroke:#181818;stroke-width:0.5;" x1="892.46" x2="1272.46" y1="1289.2969" y2="1289.2969"/><ellipse cx="902.46" cy="1302.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="911.46" y="1306.292">PlayerList()</text><ellipse cx="902.46" cy="1319.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="911.46" y="1322.5889">~PlayerList()</text><ellipse cx="902.46" cy="1335.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="911.46" y="1338.8857">nlohmann::json serialize() const</text><ellipse cx="902.46" cy="1351.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="911.46" y="1355.1826">void deserialize(const nlohmann::json &amp;data)</text><ellipse cx="902.46" cy="1368.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="911.46" y="1371.4795">const std::vector&lt;PlayerData&gt; &amp;getPlayers() const</text><ellipse cx="902.46" cy="1384.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="911.46" y="1387.7764">void clearPlayers()</text><ellipse cx="902.46" cy="1400.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="282" x="911.46" y="1404.0732">void addPlayer(const PlayerData &amp;player)</text><ellipse cx="902.46" cy="1417.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="911.46" y="1420.3701">void removePlayer(const PlayerData &amp;player)</text></g><!--class TetrisBoard--><g id="elem_TetrisBoard"><rect codeLine="208" fill="#F1F1F1" height="308.75" id="TetrisBoard" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="456" x="704.46" y="7"/><ellipse cx="888.21" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M891.1788,28.6406 Q890.6006,28.9375 889.96,29.0781 Q889.3194,29.2344 888.6163,29.2344 Q886.1163,29.2344 884.7881,27.5938 Q883.4756,25.9375 883.4756,22.8125 Q883.4756,19.6875 884.7881,18.0313 Q886.1163,16.375 888.6163,16.375 Q889.3194,16.375 889.96,16.5313 Q890.6163,16.6875 891.1788,16.9844 L891.1788,19.7031 Q890.5538,19.125 889.96,18.8594 Q889.3663,18.5781 888.7413,18.5781 Q887.3975,18.5781 886.71,19.6563 Q886.0225,20.7188 886.0225,22.8125 Q886.0225,24.9063 886.71,25.9844 Q887.3975,27.0469 888.7413,27.0469 Q889.3663,27.0469 889.96,26.7813 Q890.5538,26.5 891.1788,25.9219 L891.1788,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="80" x="908.71" y="27.8467">TetrisBoard</text><line style="stroke:#181818;stroke-width:0.5;" x1="705.46" x2="1159.46" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="712.46" y="49.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="724.46" y="55.9951">Logger *logger</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="712.46" y="65.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="58" x="724.46" y="72.292">int width</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="712.46" y="82.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="65" x="724.46" y="88.5889">int height</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="712.46" y="98.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="383" x="724.46" y="104.8857">std::vector&lt;std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;&gt; grid</text><line style="stroke:#181818;stroke-width:0.5;" x1="705.46" x2="1159.46" y1="112.1875" y2="112.1875"/><ellipse cx="715.46" cy="125.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="724.46" y="129.1826">TetrisBoard(int h, int w)</text><ellipse cx="715.46" cy="142.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="724.46" y="145.4795">~TetrisBoard()</text><ellipse cx="715.46" cy="158.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="724.46" y="161.7764">void printDebug() const</text><ellipse cx="715.46" cy="174.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="724.46" y="178.0732">int getWidth() const</text><ellipse cx="715.46" cy="191.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="724.46" y="194.3701">int getHeight() const</text><ellipse cx="715.46" cy="207.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="430" x="724.46" y="210.667">std::vector&lt;std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;&gt; &amp;getGrid()</text><ellipse cx="715.46" cy="223.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="724.46" y="226.9639">void clearBoard() const</text><ellipse cx="715.46" cy="239.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="724.46" y="243.2607">void setSize(int x, int y)</text><ellipse cx="715.46" cy="256.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="724.46" y="259.5576">int getNormalizedY(int y) const</text><ellipse cx="715.46" cy="272.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="724.46" y="275.8545">nlohmann::json serialize() const</text><ellipse cx="715.46" cy="288.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="724.46" y="292.1514">void deserialize(const nlohmann::json &amp;data)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="712.46" y="302.1016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="110" x="724.46" y="308.4482">void setupGrid()</text></g><!--class Tetromino--><g id="elem_Tetromino"><rect codeLine="232" fill="#F1F1F1" height="471.7188" id="Tetromino" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="624" x="104.46" y="506"/><ellipse cx="376.71" cy="522" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M379.6788,527.6406 Q379.1006,527.9375 378.46,528.0781 Q377.8194,528.2344 377.1163,528.2344 Q374.6163,528.2344 373.2881,526.5938 Q371.9756,524.9375 371.9756,521.8125 Q371.9756,518.6875 373.2881,517.0313 Q374.6163,515.375 377.1163,515.375 Q377.8194,515.375 378.46,515.5313 Q379.1163,515.6875 379.6788,515.9844 L379.6788,518.7031 Q379.0538,518.125 378.46,517.8594 Q377.8663,517.5781 377.2413,517.5781 Q375.8975,517.5781 375.21,518.6563 Q374.5225,519.7188 374.5225,521.8125 Q374.5225,523.9063 375.21,524.9844 Q375.8975,526.0469 377.2413,526.0469 Q377.8663,526.0469 378.46,525.7813 Q379.0538,525.5 379.6788,524.9219 L379.6788,527.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="397.21" y="526.8467">Tetromino</text><line style="stroke:#181818;stroke-width:0.5;" x1="105.46" x2="727.46" y1="538" y2="538"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="548.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="124.46" y="554.9951">Coordinate coordinate</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="564.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="124.46" y="571.292">int pieceId</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="581.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="124.46" y="587.5889">bool changed</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="124.46" y="603.8857">&#160;</text><polygon fill="none" points="115.46,611.8359,119.46,615.8359,115.46,619.8359,111.46,615.8359" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="124.46" y="620.1826">std::shared_ptr&lt;TetrominoShape&gt; shape</text><polygon fill="none" points="115.46,628.1328,119.46,632.1328,115.46,636.1328,111.46,632.1328" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="124.46" y="636.4795">CellColor color</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="124.46" y="652.7764">&#160;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="662.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="96" x="124.46" y="669.0732">bool canMove</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="679.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="124.46" y="685.3701">bool lockedInPlace</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="124.46" y="701.667">&#160;</text><ellipse cx="115.46" cy="714.6172" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="124.46" y="717.9639">static const std::vector&lt;CellColor&gt; tetromino_colors</text><line style="stroke:#181818;stroke-width:0.5;" x1="105.46" x2="727.46" y1="725.2656" y2="725.2656"/><ellipse cx="115.46" cy="738.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="124.46" y="742.2607">Tetromino()</text><ellipse cx="115.46" cy="755.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="598" x="124.46" y="758.5576">Tetromino(Coordinate coord, CellColor color, const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;s)</text><ellipse cx="115.46" cy="771.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="124.46" y="774.8545">virtual ~Tetromino()</text><ellipse cx="115.46" cy="787.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="124.46" y="791.1514">Coordinate getCoordinate() const</text><ellipse cx="115.46" cy="804.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="124.46" y="807.4482">Coordinate &amp;getCoordinate()</text><ellipse cx="115.46" cy="820.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="124.46" y="823.7451">CellColor getColor() const</text><ellipse cx="115.46" cy="836.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="369" x="124.46" y="840.042">std::shared_ptr&lt;TetrominoShape&gt; getShape() const</text><ellipse cx="115.46" cy="852.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="124.46" y="856.3389">int getId() const</text><ellipse cx="115.46" cy="869.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="124.46" y="872.6357">bool hasChanged()</text><ellipse cx="115.46" cy="885.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="124.46" y="888.9326">bool shouldBroadcastState()</text><ellipse cx="115.46" cy="901.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="124.46" y="905.2295">nlohmann::json serialize() const</text><ellipse cx="115.46" cy="918.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="124.46" y="921.5264">void deserialize(const nlohmann::json &amp;data)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="931.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="124.46" y="937.8232">void setShape(std::vector&lt;std::vector&lt;int&gt;&gt; &amp;s)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="947.7734"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="272" x="124.46" y="954.1201">void setCoordinate(Coordinate &amp;coord)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="112.46" y="964.0703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="169" x="124.46" y="970.417">void setChanged(bool c)</text></g><!--class TetrominoShape--><g id="elem_TetrominoShape"><rect codeLine="267" fill="#F1F1F1" height="178.375" id="TetrominoShape" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="481" x="175.96" y="1241.5"/><ellipse cx="354.71" cy="1257.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M357.6788,1263.1406 Q357.1006,1263.4375 356.46,1263.5781 Q355.8194,1263.7344 355.1163,1263.7344 Q352.6163,1263.7344 351.2881,1262.0938 Q349.9756,1260.4375 349.9756,1257.3125 Q349.9756,1254.1875 351.2881,1252.5313 Q352.6163,1250.875 355.1163,1250.875 Q355.8194,1250.875 356.46,1251.0313 Q357.1163,1251.1875 357.6788,1251.4844 L357.6788,1254.2031 Q357.0538,1253.625 356.46,1253.3594 Q355.8663,1253.0781 355.2413,1253.0781 Q353.8975,1253.0781 353.21,1254.1563 Q352.5225,1255.2188 352.5225,1257.3125 Q352.5225,1259.4063 353.21,1260.4844 Q353.8975,1261.5469 355.2413,1261.5469 Q355.8663,1261.5469 356.46,1261.2813 Q357.0538,1261 357.6788,1260.4219 L357.6788,1263.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="375.21" y="1262.3467">TetrominoShape</text><line style="stroke:#181818;stroke-width:0.5;" x1="176.96" x2="655.96" y1="1273.5" y2="1273.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="183.96" y="1284.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="195.96" y="1290.4951">std::vector&lt;std::vector&lt;int&gt;&gt; shape</text><line style="stroke:#181818;stroke-width:0.5;" x1="176.96" x2="655.96" y1="1297.7969" y2="1297.7969"/><ellipse cx="186.96" cy="1311.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="195.96" y="1314.792">TetrominoShape()</text><ellipse cx="186.96" cy="1327.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="442" x="195.96" y="1331.0889">TetrominoShape(const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;shape)</text><ellipse cx="186.96" cy="1344.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="195.96" y="1347.3857">const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;getShape() const</text><ellipse cx="186.96" cy="1360.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="455" x="195.96" y="1363.6826">void setShape(const std::vector&lt;std::vector&lt;int&gt;&gt; &amp;newShape)</text><ellipse cx="186.96" cy="1376.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="195.96" y="1379.9795">nlohmann::json serialize() const</text><ellipse cx="186.96" cy="1392.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="195.96" y="1396.2764">void deserialize(const nlohmann::json &amp;data)</text><ellipse cx="186.96" cy="1409.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="195.96" y="1412.5732">void invertShape()</text></g><!--class ThreadSafeQueue--><g id="elem_ThreadSafeQueue"><rect codeLine="282" fill="#F1F1F1" height="178.375" id="ThreadSafeQueue" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="227" x="1759.96" y="72.5"/><ellipse cx="1801.06" cy="88.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1804.0287,94.1406 Q1803.4506,94.4375 1802.81,94.5781 Q1802.1694,94.7344 1801.4662,94.7344 Q1798.9662,94.7344 1797.6381,93.0938 Q1796.3256,91.4375 1796.3256,88.3125 Q1796.3256,85.1875 1797.6381,83.5313 Q1798.9662,81.875 1801.4662,81.875 Q1802.1694,81.875 1802.81,82.0313 Q1803.4662,82.1875 1804.0287,82.4844 L1804.0287,85.2031 Q1803.4037,84.625 1802.81,84.3594 Q1802.2162,84.0781 1801.5912,84.0781 Q1800.2475,84.0781 1799.56,85.1563 Q1798.8725,86.2188 1798.8725,88.3125 Q1798.8725,90.4063 1799.56,91.4844 Q1800.2475,92.5469 1801.5912,92.5469 Q1802.2162,92.5469 1802.81,92.2813 Q1803.4037,92 1804.0287,91.4219 L1804.0287,94.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="1820.86" y="93.3467">ThreadSafeQueue</text><rect fill="#FFFFFF" height="15.9688" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="9" x="1980.96" y="69.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="7" x="1981.96" y="81.6387">T</text><line style="stroke:#181818;stroke-width:0.5;" x1="1760.96" x2="1985.96" y1="104.5" y2="104.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1767.96" y="115.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="1779.96" y="121.4951">std::queue&lt;T&gt; queue_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1767.96" y="131.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="1779.96" y="137.792">std::mutex mutex_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1767.96" y="147.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="1779.96" y="154.0889">std::condition_variable cond_</text><line style="stroke:#181818;stroke-width:0.5;" x1="1760.96" x2="1985.96" y1="161.3906" y2="161.3906"/><ellipse cx="1770.96" cy="175.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="1779.96" y="178.3857">void push(T value)</text><ellipse cx="1770.96" cy="191.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="1779.96" y="194.6826">bool pop(T &amp;value)</text><ellipse cx="1770.96" cy="207.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="1779.96" y="210.9795">void wait_and_pop(T &amp;value)</text><ellipse cx="1770.96" cy="223.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="1779.96" y="227.2764">bool empty() const</text><ellipse cx="1770.96" cy="240.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="75" x="1779.96" y="243.5732">void clear()</text></g><!--link Cell to ISerializable--><g id="link_Cell_ISerializable"><path codeLine="35" d="M881.03,912.66 C842.74,1068.09 807.57,1302.29 874.46,1493 C882.14,1514.88 884.6931,1521.8859 899.3831,1539.1959 " fill="none" id="Cell-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="911.03,1552.92,903.9578,1535.3136,894.8084,1543.0782,911.03,1552.92" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link Cell to Coordinate--><g id="link_Cell_Coordinate"><path codeLine="36" d="M1112.6762,825.1242 C1277.8962,903.3342 1522.54,1027.52 1726.46,1168 C1744.42,1180.37 1762.61,1194.23 1780.22,1208.48 " fill="none" id="Cell-backto-Coordinate" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1101.83,819.99,1105.5417,826.1725,1112.6762,825.1242,1108.9645,818.9417,1101.83,819.99" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Cell to CellColor--><g id="link_Cell_CellColor"><path codeLine="37" d="M876.35,912.64 C829.68,1053.72 769.4547,1235.8137 748.0047,1300.6437 " fill="none" id="Cell-to-CellColor" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="746.12,1306.34,752.7446,1299.052,747.6906,1301.5931,745.1495,1296.5391,746.12,1306.34" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Coordinate to ISerializable--><g id="link_Coordinate_ISerializable"><path codeLine="65" d="M1792.34,1452.65 C1771.68,1468.33 1749.43,1482.55 1726.46,1493 C1627.08,1538.24 1362.7828,1567.8356 1170.1128,1584.5356 " fill="none" id="Coordinate-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1152.18,1586.09,1170.6309,1590.5132,1169.5946,1578.5581,1152.18,1586.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Coordinate to nlohmann::json--><g id="link_Coordinate_nlohmann::json"><path codeLine="66" d="M2036.58,1452.57 C2056.53,1467.81 2077.79,1481.92 2099.46,1493 C2225.04,1557.22 2383.9381,1583.1652 2476.1781,1593.6052 " fill="none" id="Coordinate-to-nlohmann::json" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="2482.14,1594.28,2473.647,1589.2932,2477.1717,1593.7177,2472.7472,1597.2424,2482.14,1594.28" style="stroke:#181818;stroke-width:1.0;"/></g><!--link EndGameData to ISerializable--><g id="link_EndGameData_ISerializable"><path codeLine="78" d="M2604.93,1411.61 C2572.74,1442.65 2532.08,1475 2488.46,1493 C2367.89,1542.75 1552.7073,1578.7033 1169.9573,1593.1033 " fill="none" id="EndGameData-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1151.97,1593.78,1170.1828,1599.099,1169.7317,1587.1075,1151.97,1593.78" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link EndGameData to PlayerData--><g id="link_EndGameData_PlayerData"><path codeLine="79" d="M2693.6061,1423.732 C2703.4261,1496.442 2702.27,1589.28 2640.46,1650 C2551.69,1737.2 1734.71,1768.57 1374.14,1778.24 " fill="none" id="EndGameData-backto-PlayerData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2692,1411.84,2688.839,1418.3214,2693.6061,1423.732,2696.7671,1417.2506,2692,1411.84" style="stroke:#181818;stroke-width:1.0;"/></g><!--link EndGameData to nlohmann::json--><g id="link_EndGameData_nlohmann::json"><path codeLine="80" d="M2638.72,1411.84 C2612.74,1468.66 2582.1851,1535.5034 2565.5451,1571.8934 " fill="none" id="EndGameData-to-nlohmann::json" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="2563.05,1577.35,2570.4304,1570.8285,2565.1293,1572.8028,2563.155,1567.5017,2563.05,1577.35" style="stroke:#181818;stroke-width:1.0;"/></g><!--link GameStatus to ISerializable--><g id="link_GameStatus_ISerializable"><path codeLine="103" d="M1308.37,1483.87 C1302.74,1487.04 1297.09,1490.09 1291.46,1493 C1245.16,1516.92 1209.6165,1531.3907 1160.1165,1547.4007 " fill="none" id="GameStatus-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1142.99,1552.94,1161.9629,1553.1095,1158.27,1541.6919,1142.99,1552.94" style="stroke:#181818;stroke-width:1.0;"/></g><!--link GameStatus to nlohmann::json--><g id="link_GameStatus_nlohmann::json"><path codeLine="104" d="M1708.51,1485.14 C1714.47,1487.95 1720.46,1490.58 1726.46,1493 C1863.59,1548.33 2302.7344,1583.4441 2476.2844,1595.5041 " fill="none" id="GameStatus-to-nlohmann::json" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="2482.27,1595.92,2473.5689,1591.3057,2477.282,1595.5734,2473.0144,1599.2865,2482.27,1595.92" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link NetworkManager to Logger--><g id="link_NetworkManager_Logger"><path codeLine="159" d="M2606.8339,1025.7124 C2506.8839,1122.6024 2412.7,1213.91 2350.94,1273.78 " fill="none" id="NetworkManager-backto-Logger" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2615.45,1017.36,2608.3578,1018.6641,2606.8339,1025.7124,2613.926,1024.4082,2615.45,1017.36" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link NetworkManager to Packet--><g id="link_NetworkManager_Packet"><path codeLine="160" d="M3116.1795,1118.571 C3135.0595,1151.131 3147.19,1172.05 3163.59,1200.35 " fill="none" id="NetworkManager-backto-Packet" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="3110.16,1108.19,3109.7094,1115.387,3116.1795,1118.571,3116.6301,1111.374,3110.16,1108.19" style="stroke:#181818;stroke-width:1.0;"/></g><!--link NetworkManager to nlohmann::json--><g id="link_NetworkManager_nlohmann::json"><path codeLine="161" d="M2918.53,1108.18 C2919.79,1267.27 2908.55,1431.42 2862.46,1493 C2806.66,1567.57 2701.6525,1590.1558 2628.7425,1597.1658 " fill="none" id="NetworkManager-to-nlohmann::json" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="2622.77,1597.74,2632.1115,1600.8603,2627.747,1597.2615,2631.3459,1592.897,2622.77,1597.74" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Packet to nlohmann::json--><g id="link_Packet_nlohmann::json"><path codeLine="180" d="M2998.94,1460.65 C2974.09,1472.25 2948.96,1483.27 2924.46,1493 C2822.16,1533.65 2704.3636,1564.8766 2628.5436,1583.1166 " fill="none" id="Packet-to-nlohmann::json" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="2622.71,1584.52,2632.3959,1586.304,2627.5713,1583.3505,2630.5248,1578.5259,2622.71,1584.52" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link ISerializable to PlayerData--><g id="link_ISerializable_PlayerData"><path d="M1039.7095,1660.796 C1064.5595,1679.076 1079,1689.71 1106.29,1709.78 " fill="none" id="ISerializable-backto-PlayerData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1025.21,1650.13,1036.1542,1665.6292,1043.2649,1655.9629,1025.21,1650.13" style="stroke:#181818;stroke-width:1.0;"/></g><!--link PlayerList to ISerializable--><g id="link_PlayerList_ISerializable"><path codeLine="205" d="M1038.59,1428.24 C1019.39,1470.56 1005.1634,1501.9266 989.5334,1536.3966 " fill="none" id="PlayerList-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="982.1,1552.79,994.9979,1538.8744,984.0689,1533.9188,982.1,1552.79" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link PlayerList to PlayerData--><g id="link_PlayerList_PlayerData"><path codeLine="206" d="M1130.353,1439.1586 C1146.083,1477.4186 1158.18,1511.11 1169.46,1553 C1183.37,1604.65 1192.27,1664.44 1197.62,1709.98 " fill="none" id="PlayerList-backto-PlayerData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1125.79,1428.06,1124.372,1435.1303,1130.353,1439.1586,1131.771,1432.0883,1125.79,1428.06" style="stroke:#181818;stroke-width:1.0;"/></g><!--link TetrisBoard to ISerializable--><g id="link_TetrisBoard_ISerializable"><path codeLine="228" d="M704.28,188.6 C480.37,219.47 161.83,279.24 86.46,376 C10.19,473.91 6,1400.24 88.46,1493 C132.91,1543 507.9949,1573.8392 750.9849,1588.9992 " fill="none" id="TetrisBoard-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="768.95,1590.12,751.3585,1583.0108,750.6113,1594.9875,768.95,1590.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link TetrisBoard to Cell--><g id="link_TetrisBoard_Cell"><path codeLine="229" d="M932.46,328.01 C932.46,406.67 932.46,490.66 932.46,571.49 " fill="none" id="TetrisBoard-backto-Cell" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="932.46,316.01,928.46,322.01,932.46,328.01,936.46,322.01,932.46,316.01" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link TetrisBoard to Logger--><g id="link_TetrisBoard_Logger"><path codeLine="230" d="M1120.8996,324.0713 C1427.3096,586.8113 2028.81,1102.57 2228.57,1273.86 " fill="none" id="TetrisBoard-backto-Logger" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1111.79,316.26,1113.741,323.2022,1120.8996,324.0713,1118.9485,317.1291,1111.79,316.26" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Tetromino to ISerializable--><g id="link_Tetromino_ISerializable"><path codeLine="262" d="M225.93,978.21 C119.8,1139.09 32.09,1348.56 158.46,1493 C198.09,1538.3 526.12,1569.7794 750.53,1586.5394 " fill="none" id="Tetromino-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="768.48,1587.88,750.9769,1580.5561,750.0831,1592.5227,768.48,1587.88" style="stroke:#181818;stroke-width:1.0;"/></g><!--link Tetromino to CellColor--><g id="link_Tetromino_CellColor"><path codeLine="263" d="M568.84,978.12 C605.5,1038.85 643.09,1104.91 674.46,1168 C698.16,1215.66 717.6361,1268.7005 728.6761,1300.5705 " fill="none" id="Tetromino-to-CellColor" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="730.64,1306.24,731.4737,1296.4265,729.0034,1301.5154,723.9144,1299.0451,730.64,1306.24" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link Tetromino to Coordinate--><g id="link_Tetromino_Coordinate"><path codeLine="264" d="M587.6734,986.8439 C635.2834,1038.3739 683.53,1077.72 746.46,1108 C943.07,1202.59 1524.5,1085.44 1726.46,1168 C1750.61,1177.87 1773.81,1192.21 1795.14,1208.32 " fill="none" id="Tetromino-backto-Coordinate" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="579.53,978.03,580.6637,985.1514,587.6734,986.8439,586.5397,979.7225,579.53,978.03" style="stroke:#181818;stroke-width:1.0;"/></g><!--reverse link Tetromino to TetrominoShape--><g id="link_Tetromino_TetrominoShape"><path codeLine="265" d="M416.46,990.17 C416.46,1082.91 416.46,1171.72 416.46,1241.47 " fill="none" id="Tetromino-backto-TetrominoShape" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="416.46,978.17,412.46,984.17,416.46,990.17,420.46,984.17,416.46,978.17" style="stroke:#181818;stroke-width:1.0;"/></g><!--link TetrominoShape to ISerializable--><g id="link_TetrominoShape_ISerializable"><path codeLine="279" d="M545.79,1419.5 C586.05,1444.96 631.24,1471.62 674.46,1493 C719.63,1515.35 753.7657,1529.6986 800.0857,1546.7286 " fill="none" id="TetrominoShape-to-ISerializable" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="816.98,1552.94,802.1561,1541.0972,798.0152,1552.3601,816.98,1552.94" style="stroke:#181818;stroke-width:1.0;"/></g><!--SRC=[lLdTRzis47_FNq6WG62dJT5zF0nPPc1DiZP3FxBQszedWvKOYujCQYJbDElQltrt92MHD1Ld7vaVPEhkU3mUVtSyKaLDjIRdSwOuhVaVz7tDoCSz0h-76wvCIsloEU9EfZ5NrB9QKo6EZdxJKX3jHK6E559e4qjl92z9oGOfAvCgsI-feTEzJtjxXJKlOJlx1lO9gsiWMkeXlimDDOneV0x44rbB1JR1qnEbL2KNA5hqJSVYmf26iuATbmD1NWkcpa_TE0zHvIHLuNtpsJBz2tPTCVFQzOxTudaNRgZ4PUWgFJ1HbdSZ31E2xhOHTnwy07pRo2jtNGFtJ6E-wnhuDE5tixB-INXdwyRST5xO1HCYDqmfNh90nswSuDFYn4BWyF3FMG9bnv27XsHOAaTx_7X6-ddtIAfbSTNXtxrDj2cFZhHHNAp8cb7TAhPcmhoYQ-Rdvb0DS5Dc4f6OA7j2BQ6_VR2QDfgLBtcXf6OmiLBtY-FGHkoOHQMaa4T7Xg_Pif7WukE8Nl5LjLHCoxerN8fbWUREd1qBx1CgoqzW6GJH0EL-_ZsfdqL0mYN_y0kj7n5itK2h4_AeVZj92EzYxz2oVEkqfEHtbdmJknSLRajhL1j9toqXaR-5CEz9EtpGlh7G6not3S2GYuYBrNU-FnFbCrYDKyXwlVDHlv66rXUuyZhq98ZY-WQacWkctx0r154Pa2zXuFe5sx3Q4oqKDgmmKXrVrFI6AHnpHXhRrlVYmJwNXxFCXMh8nuWT38nOusv44KnJhUwzE91wx7tEqDvBMHDToROkhRj-RYoc5FkzvOgLBz2zFqZbUUGxyiMJ1DlpGghKGPvbU-LP2rnWg_saPXH66j4GIBmMYuhhdCukUfmfs5MdeUAwMSIaCRTjYaLWAZPc2WeN_rC8QfnWy5xt23ySmYOqD9JDsu_u3E2J2UI0cqEWX-0BkLenrSFFlKPRY0ZsZS-U7paPdI1hjgpboZiaxBw_rglGYt5wjqPWOX_o-YjchgMwUaa53Irpcj4ZmWaiBn7jJ1GtVQwWXXU186pG6lOPpuxr3j4rGhTJKsp5jM7g1JwXS9XSqE8Aek2cOO_SF2vRKU1cTepoVlfEYEnFPr6uSlsc5G9cdQ0gz4SBTd_rvTB89MysNq-wLyAR9M1PJR_rVSx0wkSInZfOkKPlTvWnKUg2WHCFPhPgWwQU924cIcTkQdiezLv9MXPKcn5HA_kWmz91RVyzSR2qadxA3xgk3LMQHJgjnOvv00xtxKTac8cMhIeOjgTUcJMnegAiErsTPSrMxoRi5vRuKg30YHG2N3T9Ea3-V3BUwPH3VE_iX_8Bgg_cMErup4scsrpP3CmmO5e1-pA39B1Sq-OOWV7Dqjm9X3F88Gw-EbG8iTEoOoSs8x8rAzYtL-xz5a4k2hdE2wvRmpxqcbxYspQxwx_5nhgIsxfmGo6DuGxRgJhfM3laEzrPULCfHiikUopiMuQF4J7AL72ouHkspQS61YwECSvdP4svmCKS5S0nmCnHlXi69Ro8nKUZPC6qHeoTRQ0UdlGjii_mRvgHFe-NQnB9e1sluuNl1S98B62wXWsK168kp2BDEFqOv05ZFXmp0keRvzk9BRsIJG2hAvTTSXndHyePBxkytTtE4YKDJEqaIXcmtni8PD7MTMFKzBPEmUxdCx2FqnbKbVzGfpr5_ojxugfrNmTlk_Lc9sFa6thjHynKI7YKzch3Z3YDTlAybs2NmfevqPeKMBYLqPiQzgJlzOz0IAG37wpSVo8msEGtnVGq6teH7c6SfXRZOI6Cc3xv8uezq6v1OdzY8Em3fEXov6RhNauucNBC7QjiFJPKeBmSAMLzLUCtJQXQFyNpmgffYBAUD9HU6TfzJ7GCTk614f7dtdLkg08By9wV734SlKkAmvBkEtSc5IMUUNVso40kT_n5Z0skpXm20cvoGlKhjM2mylgffAhibogWsMDIvRBGTRzkeK0qkmPGP4xP-tQLFnV-oajJvLdF6LzL9bSQ-_bljNM5Pw8b9AjZl1URpTmgFbCyiSekdhSscwtcY21xL-BlXfApyYkfrXPc_KNFRUdflmpEJ4djul0QFHcyLzPz6TZSnMqhrSTuvvAsyNu4Y8KOoM0iP1_WnILeZOZ1xXsW3iiI6M7EKlgb6oZffVKZaboFvtRUi0qEGd0CjmlTXuBjKOEnx4NrSA4OhMKWjf_8TH8xBhn9kXYzBVEADimUs6mh7oxfvRjBnXNL9t0IMh4oTrFqj3l6-Vlr-uVlBLyioDOd2sTguUnFuEWySRVr7Ne5on8kMF3b8v3rVdD6z6VQNQkayS_BfXzjecbHyH8IVqZ2sszMdWj8oWNRorrYX7FibKFvrTcmjEFeBaPTH8r4g6F67n46-a7ymM5WOEp6SzwAOKlT3cGFtZpvRl6AekFRTwR7ICp4ABgJ9i6kv-7mzrUNs2vSR9ZgRD_RaSQTYGvvuTAxXSYiVxzazjmwfvVi9ppJa-F5x6EqVRUwcYp8XjOjY_978nkWxqSCs-EQShEa0c8Z8s6xClTHRQIaIYRhhXeMCs8Ro-tR0_jSxhW6G19-AFeB]--></g></svg>